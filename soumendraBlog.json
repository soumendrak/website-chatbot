[{"pageContent":"OpenAI released its latest LLM, GPT-4, on 14th March 2023. There are the following methods to access GPT-4: Access via ChatGPT Plus subscription. Apply for the API waitlist: GPT-4 API waitlist (openai.com) The new Bing runs on ChatGPT-4: Confirmed: the new Bing runs on OpenAI’s GPT-4 | Bing Search Blog Poe.com from Quora: If without a subscription, limited access, only 1 query per day. openai/evals: For a limited time, OpenAI will grant GPT-4 access to those who contribute high-quality evals.","metadata":{"source":"https://blog.soumendrak.com/how-to-access-gpt-4","title":"How to access GPT-4","contentLength":90}},{"pageContent":"Ownership and borrowing are fundamental concepts in Rust that help ensure memory safety and prevent common programming errors like data races and null pointer dereferences. In this blog, we'll explore ownership and borrowing and how they work in Rust. Ownership in Rust In Rust, ownership is a concept that ensures that every value has a unique owner, which is the variable that holds the value. The owner has the exclusive right to modify or destroy the value. Rust enforces these rules at compile-time to prevent memory-related bugs like data races, null pointer dereferences, and memory leaks. When a variable goes out of scope, Rust automatically deallocates the memory associated with that value. This means that when a function returns or when a block of code ends, any values declared within that scope are automatically cleaned up by Rust. This feature ensures that memory is freed when it is no longer needed, preventing memory leaks and making Rust programs more efficient and reliable. The ownership model in Rust also provides a guarantee of memory safety. Since there is only one owner for each value, having two or more pointers to the same value is impossible, which could lead to undefined behavior or data races. Additionally, Rust's borrow checker enforces strict rules around borrowing and mutation of values to ensure that multiple program parts can access the same value without introducing bugs. Let's look at an example: fn main() { let x = \"hello\"; { let y = \"world\"; println!(\"{} {}\", x, y); } println!(\"{}\", x); } In this code, the variables x and y Are allocated on the stack when the program runs. When the inner block ends, Rust automatically deallocates the memory for the variable y. When the function main() ends, Rust deallocates the memory for the variable x. This ensures that the memory is managed correctly and no memory leaks. The ownership model in Rust is enforced at compile-time. The compiler checks that each value has a unique owner and that the memory is correctly managed throughout the program's execution. This guarantees memory safety and helps prevent common memory-related bugs like null pointer dereferences, buffer overflows, and use-after-free errors. Borrowing in Rust Ownership is a powerful concept, but sometimes we must allow multiple parts of our program to access the same value. This is where \"borrowing\" comes in. In Rust, we can borrow a value using a reference. A reference is a pointer to a value. Still, unlike a traditional pointer, references have strict lifetime rules that ensure they remain valid and do not outlive the data they point to. Here's an example of borrowing in Rust: fn main() { let s1 = String::from(\"hello\"); let len = calculate_length(&s1); println!(\"The length of '{}' is {}.\", s1, len); } fn calculate_length(s: &String) -> usize { s.len() } In this example, we define a function calculate_length that takes a reference to a String value. The & symbol in the function signature indicates that s is a reference to a String, rather than an owned value. This means that ownership of s1 is not transferred to calculate_length, but rather a temporary reference to s1 is created and passed to the function. The calculate_length function then returns the string length, which is printed to the console along with the original string `s1`. Conclusion Ownership and borrowing are fundamental concepts in Rust that are essential for ensuring memory safety and avoiding common programming errors. By grasping these concepts, you can write Rust, safer and more reliable code. In Rust, every value has a unique owner, which means that the variable that holds the value has exclusive control over it. Ownership ensures that memory is adequately managed and helps prevent issues like memory leaks, data races, and null pointer dereferences. Borrowing is another crucial concept in Rust that enables you to pass references to values without transferring ownership. This allows multiple program parts to access the same value without creating additional copies or risking memory-related errors. Overall, understanding ownership and borrowing in Rust is crucial for writing safe and efficient code free from common memory-related bugs.","metadata":{"source":"https://blog.soumendrak.com/ownership-and-borrowing-in-rust","title":"Ownership and Borrowing in Rust","contentLength":682}},{"pageContent":"Introduction JSONSchema validation is a powerful tool for validating JSON data. It helps ensure that the data you receive conforms to a particular schema or structure. With JSONSchema validation, you can define the expected format of the JSON data and then validate it against that schema. This is particularly useful when working with APIs or other data sources that provide JSON data. Here is an example of how to use JSONSchema validation in Python: First, we need to install the jsonschema Library. You can do this using pip: pip install jsonschema Next, we'll create a JSON schema that defines the structure of our expected data. Here's an example schema: schema = { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"}, \"email\": {\"type\": \"string\", \"format\": \"email\"}, \"address\": {\"type\": \"string\"} }, \"required\": [\"name\", \"age\"] } This schema defines an object with four properties: name, age, email, and address. The name and age properties are required. The email property must be a valid email address. Now, let's create some JSON data that we want to validate against this schema: data = { \"name\": \"John Doe\", \"age\": 30, \"email\": \"[email protected]\", \"address\": \"123 Main St.\" } Finally, we'll use the jsonschema Library to validate our data against the schema: import jsonschema from loguru import logger class JSONSchemaValidator: @classmethod def validate(cls, json_data: dict, schema: dict): validator = jsonschema.Draft7Validator(schema) errors = validator.iter_errors(json_data) err_list = [] for error in errors: logger.error(f\"The JSON data is not valid: {error=}\") err_list.append(error) return err_list That's it! With just a few lines of code, we've used JSONSchema validation to ensure that our JSON data conform to a particular structure. This can be incredibly useful when working with APIs or other data sources that provide JSON data. JSON schema Keywords anyOf This keyword is used to specify a list of schemas where at least one schema must validate the data. Here's an example: schema = { \"anyOf\": [ {\"type\": \"string\"}, {\"type\": \"number\"} ] } This schema defines the data as a string or a number. If the data is a string, it must be a valid string; if it's a number, it must be a valid number. allOf This keyword is used to specify a list of schemas, where all of them must validate the data. Here's an example: schema = { \"allOf\": [ {\"type\": \"object\"}, {\"required\": [\"name\", \"age\"]} ] } This schema defines the data as an object with the properties \"name\" and \"age\". If any of these conditions are not met, the validation will fail. OneOf To validate against oneOf, the given data must be valid against exactly one of the given subschemas. Here's an example: schema = { \"oneOf\": [ { \"type\": \"number\", \"multipleOf\": 5 }, { \"type\": \"number\", \"multipleOf\": 3 } ] } Here the field can be either a multiple of 3 or 5, like 100, 12, 18. However, the validation will fail if it happens to be a multiple of 3 and 5, like 15, 90, or 150. enum This keyword is used to specify a list of allowed values for the data. Here's an example: schema = { \"type\": \"string\", \"enum\": [\"red\", \"green\", \"blue\"] } This schema defines that the data must be a string and can only be one of the values \"red,\" \"green,\" or \"blue.\" Any other value will fail validation. if/else These keywords are used to define conditional schemas. The if schema is tested first, and if it validates the data, the then schema is used. If the if schema fails, the else schema is used (if it exists). Here's an example: schema = { \"type\": \"object\", \"properties\": { \"is_employee\": {\"type\": \"boolean\"}, \"salary\": {\"type\": \"number\"} }, \"if\": {\"properties\": {\"is_employee\": {\"const\": True}}}, \"then\": {\"required\": [\"salary\"]}, \"else\": {\"not\": {\"required\": [\"salary\"]}} } This schema defines that if the is_employee property is True, the salary property is required. If the is_employee property is False, the salary property is not allowed. type This keyword is used to specify the type of data expected. Here's an example: schema = {\"type\": \"string\"} This schema defines that the data must be a string. format This keyword is used to specify a format for a string or number. Here's an example: schema = {\"type\": \"string\", \"format\": \"email\"} This schema defines that the data must be a string in email format. properties This keyword is used to define an object's properties and schemas. Here's an example: schema = { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"} } } This schema defines the data as an object with the properties \"name\" and \"age\". The \"name\" property must be a string, and the \"age\" property must be an integer. additionalProperties This keyword is used to specify whether additional properties are allowed in an object. Here's an example: schema = { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"} }, \"additionalProperties\": False } This schema defines that only the \"name\" and \"age\" properties are allowed in the object. Any additional properties will not be permitted. To enable you can make the value True` items This keyword is used to specify the schema of the items in an array. Here's an example: schema = { \"type\": \"array\", \"items\": {\"type\": \"string\"} } required This keyword is used to define the required properties of an object. Here's an example: schema = { \"type\": \"object\", \"properties\": { \"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"integer\"} }, \"required\": [\"name\", \"age\"] } This schema defines the required \"name\" and \"age\" properties. minimum/maximum The minimum keyword is used to specify the minimum value of a number. Similarly, the maximum keyword is used for maximum value. Here's an example: schema = {\"type\": \"number\", \"minimum\": 0, \"maximum\": 100} pattern This keyword is used to specify a regular expression pattern that the data must match. Here's an example: schema = {\"type\": \"string\", \"pattern\": \"^\\\\d{3}-\\\\d{2}-\\\\d{4}$\"} This schema defines that the data must be a string that matches the pattern of a social security number. minLength/maxLength The `minLength` keyword is used to specify the minimum length of a string, and `maxLength` for the maximum length. Here's an example: schema = {\"type\": \"string\", \"minLength\": 5, \"maxLength\": 10} This schema defines that the data must be a string of at least five characters and a maximum of 10 characters. To learn more about the possible keywords, follow the Understanding JSON Schema — Understanding JSON Schema 2020-12 documentation (json-schema.org).","metadata":{"source":"https://blog.soumendrak.com/how-to-validate-a-json-in-python","title":"How to validate a JSON in Python","contentLength":1033}},{"pageContent":"In this blog post, I will share ten best practices every Python developer should follow. These best practices will help you write better, more efficient, and readable Python code. Follow PEP 8 Style Guide The Python community has established a style guide, PEP 8, which outlines guidelines for writing Python code. Following these guidelines makes your code more readable and easier to maintain. You can check out the official guide here: https://www.python.org/dev/peps/pep-0008/ Use Descriptive Names Use descriptive names for variables, functions, and classes that describe their purpose. This makes it easier for others to understand what your code is doing. For example: # Bad Example x = 'Soumendra Kumar Sahoo' y = 5 # Good Example customer_name = 'Soumendra Kumar Sahoo' number_of_items = 5 Document your Code Document your code using comments and docstrings. This helps other developers understand your code and makes it easier for you to maintain and modify it in the future. For example: def calculate_total_price(item_prices): \"\"\" Calculate the total price of items in a list :param item_prices: Price of each item :return: total price of all items \"\"\" total_price = sum(item_prices) return total_price Use List Comprehension Use list comprehension instead of loops when creating new lists. This makes your code more readable and concise. For example: # Using a for loop new_list = [] for i in range(10): new_list.append(i * 2) # Using list comprehension new_list = [i * 2 for i in range(10)] Don't Repeat Yourself (DRY) Avoid duplicating code. Instead, use functions or classes to encapsulate functionality used in multiple places. Use Exceptions Use exceptions to handle error conditions instead of using if-else statements. This makes your code more readable and easier to maintain. For example: try: result = 10 / 0 except ZeroDivisionError: print(\"Cannot divide by zero\") Use Enumerate Use enumerate to get the index of each element in a list. This makes your code more readable and concise. For example: # Without enumerate for i in range(len(my_list)): print(i, my_list[i]) # With enumerate for i, item in enumerate(my_list): print(i, item) Use Generators Use generators instead of lists when iterating over large data sets. This saves memory and makes your code more efficient. For example: # Using a list my_list = [i * 2 for i in range(100000)] # Using a generator my_generator = (i * 2 for i in range(100000)) Use Context Managers Use context managers to ensure that resources are adequately managed and released. This includes file I/O operations and database connections. For example: # Bad example f = open('file.txt', 'r') data = f.read() f.close() # Good example with open('file.txt', 'r') as f: data = f.read() Use Decorators Use decorators to add functionality to functions without modifying the original function. This makes your code more readable and easier to maintain. For example: def my_decorator(func): def wrapper(): print(\"Before the function is called.\") func() print(\"After the function is called.\") return wrapper @my_decorator def say_hello(): print(\"Hello\") say_hello() # Output Before the function is called. Hello After the function is called. Use Virtual Environments Use virtual environments to create isolated Python environments for your projects. This helps to avoid conflicts between different packages and dependencies. For example: # Creating a virtual environment python -m venv myenv # Activating the virtual environment source myenv/bin/activate # if you are using conda then create an venv using conda create -n <env name> # activate environment conda activate <env name> Use version control Do not manage changes by folders and file management. Instead, use version control to manage your code and collaborate with other developers. This helps to keep track of changes and makes it easier to revert to previous versions if needed. Conclusion In conclusion, following these best practices will make you a better Python developer and help you write more efficient and maintainable code. Using descriptive names, documenting your code, and following the PEP 8 style guide will make your code more readable and easier to understand. List comprehension, generators, and context managers will make your code more efficient and save memory. Exceptions, assertions, and logging will make your code more robust and easier to debug. Finally, using version control will make it easier to collaborate with other developers and maintain your code over time.","metadata":{"source":"https://blog.soumendrak.com/10-best-practices-for-your-python-code","title":"10 Best Practices for your Python code","contentLength":699}},{"pageContent":"The first time I heard this term, I thought of it as a relationship term where couples do not trust each other. However, in the tech industry, it has a different meaning altogether. Naming things has always been challenging, and people are creative in calling things with different meanings overall for the ordinary person. So what do you think about the terms Zookeeper, Rust, Python, Anaconda, Jupyter, etc.? Zero Trust is a security model that assumes all users, devices, and network traffic is potential threats. Therefore, it requires strict identity verification for every person and device trying to connect to a network, regardless of whether inside or outside the network perimeter. In a Zero Trust environment, users are not automatically trusted and must be authenticated and authorized before accessing any resources. This approach also involves continuously monitoring devices and user behavior and using encryption and least-privilege access policies to limit the potential damage of any security breaches. The Zero Trust model is based on the principle that organizations should not automatically trust anything inside or outside their perimeters. Instead, they should verify anything that tries to connect to their systems before granting access. This approach can help organizations prevent data breaches and cyber-attacks. It can also minimize the damage caused by those incidents, as it limits the attacker's ability to move laterally across the network. To take care of this industry, is having a new CxO role called CZTO (Chief Zero Trust Officer). Let's see how it unfolds. Zero Trust is a security model that provides a comprehensive approach to securing modern networks, applications, and data by assuming that all users, devices, and network traffic are potential risks. It requires strict identity verification and continuous monitoring to prevent security breaches and cyber-attacks.","metadata":{"source":"https://blog.soumendrak.com/what-is-zero-trust","title":"What is Zero Trust?","contentLength":297}},{"pageContent":"Requests - Requests is a library used for making HTTP requests in Python. It provides support for handling HTTP methods like GET, POST, and DELETE, and includes features like request headers and authentication. Example code snippet: # Handwritten import requests response = requests.get('https://jsonplaceholder.typicode.com/posts') print(response.json()) BeautifulSoup – BeautifulSoup is a library used for web scraping in Python. It provides support for parsing HTML and XML documents and includes features like navigating the document tree and extracting data. import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Python_(programming_language)' response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string print(title) NumPy – NumPy is a library used for scientific computing with Python. It provides support for large, multi-dimensional arrays and matrices, and includes a large collection of mathematical functions to operate on these arrays. Example code snippet: import numpy as np a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) c = a + b print(c) # Output [5 7 9] Pandas – Pandas is a library used for data manipulation and analysis. It provides support for handling tabular data, including reading and writing various data formats, filtering, sorting, grouping data, and much more. Example code snippet: import pandas as pd data = {'Name': ['Alice', 'Bob', 'Charlie', 'David'], 'Age': [25, 32, 18, 47], 'Gender': ['F', 'M', 'M', 'M']} df = pd.DataFrame(data) print(df) # Output Name Age Gender 0 Alice 25 F 1 Bob 32 M 2 Charlie 18 M 3 David 47 M Matplotlib – Matplotlib is a library used for creating data visualizations in Python. It provides support for creating various types of plots, including line, bar, scatter, and more. Example code snippet: import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10] plt.plot(x, y) plt.xlabel('X-axis') plt.ylabel('Y-axis') plt.title('Line Plot') plt.show() Scikit-learn – Scikit-learn is a library used for machine learning in Python. It provides support for various machine learning algorithms, including classification, regression, and clustering. Example code snippet: from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier iris = load_iris() X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2) knn = KNeighborsClassifier(n_neighbors=3) knn.fit(X_train, y_train) print(knn.score(X_test, y_test)) 0.9333333333333333 Keras – Keras is a high-level neural networks API written in Python. It provides support for building and training deep learning models, with a focus on enabling fast experimentation. Example code snippet: import keras from keras.models import Sequential from keras.layers import Dense model = Sequential() model.add(Dense(10, input_dim=4, activation='relu')) model.add(Dense(3, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) print(model.summary()) Output: Model: \"sequential\" ________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense (Dense) (None, 10) 50 dense_1 (Dense) (None, 3) 33 ================================================================= Total params: 83 Trainable params: 83 Non-trainable params: 0 _________________________________________________________________ None TensorFlow – TensorFlow is a library used for machine learning and deep learning in Python. It provides support for building and training various types of neural networks, including convolutional neural networks and recurrent neural networks. Example code snippet: import tensorflow as tf model = tf.keras.Sequential([ tf.keras.layers.Dense(10, input_shape=(4,), activation='relu'), tf.keras.layers.Dense(3, activation='softmax') ]) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) print(model.summary()) Output: Model: \"sequential_1\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense_2 (Dense) (None, 10) 50 dense_3 (Dense) (None, 3) 33 ================================================================= Total params: 83 Trainable params: 83 Non-trainable params: 0 _________________________________________________________________ PyTorch – PyTorch is a library used for machine learning and deep learning in Python. It provides support for building and training various types of neural networks, and includes features like automatic differentiation and GPU acceleration. Example code snippet that demonstrates the use of PyTorch to create and train a simple neural network: import torch import torch.nn as nn import torch.nn.functional as F class Net(nn.Module): def __init__(self): super(Net, self).__init__() # 1 input image channel, 6 output channels, 5x5 square convolution # kernel self.conv1 = nn.Conv2d(1, 6, 5) self.conv2 = nn.Conv2d(6, 16, 5) # an affine operation: y = Wx + b self.fc1 = nn.Linear(16 * 5 * 5, 120) # 5*5 from image dimension self.fc2 = nn.Linear(120, 84) self.fc3 = nn.Linear(84, 10) def forward(self, x): # Max pooling over a (2, 2) window x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2)) # If the size is a square, you can specify with a single number x = F.max_pool2d(F.relu(self.conv2(x)), 2) x = torch.flatten(x, 1) # flatten all dimensions except the batch dimension x = F.relu(self.fc1(x)) x = F.relu(self.fc2(x)) x = self.fc3(x) return x net = Net() print(net) Output: Net( (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1)) (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1)) (fc1): Linear(in_features=400, out_features=120, bias=True) (fc2): Linear(in_features=120, out_features=84, bias=True) (fc3): Linear(in_features=84, out_features=10, bias=True) ) NLTK – NLTK is a library used for natural language processing in Python. It provides support for various tasks, including text classification, sentiment analysis, and part-of-speech tagging. Example code snippet: import nltk nltk.download('punkt') text = \"This is a sample sentence. It contains multiple sentences.\" sentences = nltk.sent_tokenize(text) print(sentences) Output: ['This is a sample sentence.', 'It contains multiple sentences.'] Conclusion In conclusion, Python has a vast collection of libraries that make it an incredibly versatile language for a wide range of applications, from web development to machine learning. In this blog post, we've highlighted 10 Python libraries that every AI/ML developer should know, each with its unique features and use cases. Of course, this list is by no means exhaustive, and there are many other libraries worth exploring. But with the knowledge gained from these libraries, developers can continue to expand their skills and build innovative solutions to real-world problems.","metadata":{"source":"https://blog.soumendrak.com/10-python-libraries-every-aiml-developer-should-know","title":"10 Python Libraries Every AI/ML Developer Should Know","contentLength":1006}},{"pageContent":"GitHub and open-source software are two terms often misinterpreted; they are not the same thing. While both are essential to software development, the two have significant differences. This post will explore the differences between GitHub and open source and how they work together. Open-source software Open Source Software is software whose source code is freely available to the public. This means anyone can view, modify, and distribute the code without restrictions. Open-source software is often developed by a community of developers who collaborate and contribute to the project, resulting in continually evolving and improving the software. Some famous examples of open-source software include the Linux operating system, the Apache web server, and the Mozilla Firefox browser. GitHub GitHub, on the other hand, is a web-based platform that provides various tools and services for software developers. GitHub is not open-source software but built on top of open-source software. The platform provides features such as version control, bug tracking, project management, and collaboration tools, making it easier for developers to work together on software projects. GitHub allows developers to host their open-source software projects on the platform and make them available to the public. Differences Between GitHub and Open Source The main difference between GitHub and open-source software is that GitHub is a platform for software development, while open-source software is a type of software. GitHub provides tools and services that can be used to develop open-source software, but it is not open-source software itself. Another difference is that while open-source software is typically free and available to the public, GitHub is a paid platform (having a free tier) that offers additional features and services to paying customers. GitHub is a business that generates revenue by selling services and features to users. At the same time, open-source software is typically created and maintained by a community of volunteers who contribute to the project without receiving any monetary compensation. In summary, while GitHub and open-source software are related to software development, they are different. Open-source software is a type of software whose source code is freely available to the public, while GitHub is a platform that provides tools and services for software development.","metadata":{"source":"https://blog.soumendrak.com/github-vs-open-source-understanding-the-differences","title":"GitHub vs. Open Source: Understanding the Differences","contentLength":376}},{"pageContent":"Introduction When working with a database, creating tables with unique identifiers for each row is often necessary. One way to do this is by using autoincrement IDs. SQLAlchemy, a popular Python SQL toolkit, provides built-in support for autoincrement IDs. In this blog post, we'll explore how to use autoincrement IDs in SQLAlchemy schema definitions and inserts. Defining a Table with an Autoincrement ID To define a table with an autoincrement ID in SQLAlchemy, we can use the Column class with the primary_key and autoincrement arguments. Here's an example: from sqlalchemy import Column, Integer, String from sqlalchemy.ext.declarative import declarative_base Base = declarative_base() class User(Base): __tablename__ = 'users' id = Column(Integer, primary_key=True, autoincrement=True) name = Column(String) In this example, we define a User table with an id column that is an Integer type, is the primary_key, and has autoincrement enabled. We also define a name column that is a String type. Inserting Data with an Autoincrement ID To insert data into a table with an autoincrement ID, we don't need to specify a value for the id column. SQLAlchemy will automatically generate an ID for us. Here's an example: from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker engine = create_engine('sqlite:///example.db') Session = sessionmaker(bind=engine) session = Session() user = User(name='John Doe') session.add(user) session.commit() print(user.id) # Output: 1 In this example, we first create an engine object that connects to an SQLite database file. We then create a Session object from the sessionmaker function and use it to create a new User object with a name of 'John Doe.' We add the user to the session and commit the changes. Finally, we printed the id of the user, which is automatically generated by SQLAlchemy and is equal to 1. Conclusion Autoincrement IDs are a convenient way to create unique identifiers for each row in a database table. In SQLAlchemy, we can easily define a table with an autoincrement ID by using the Column class with the primary_key and autoincrement arguments. When inserting data into a table with an autoincrement ID, we don't need to specify a value for the id column. SQLAlchemy will automatically generate an ID for us. With these tools, we can quickly create robust and scalable database applications in Python.","metadata":{"source":"https://blog.soumendrak.com/autoincrement-id-support-in-sqlalchemy","title":"Autoincrement ID Support in SQLAlchemy","contentLength":386}},{"pageContent":"Boosting Go Performance: Understanding Concurrency and Parallelism for Efficient Code Execution GoLang has built-in support for concurrency and parallelism, making it an excellent choice for building highly scalable and efficient systems. One of the key features that make this possible is the go keyword, which allows you to execute a function in a separate goroutine. Here's an example: func main() { go doSomething() // Do other things in the main goroutine } func doSomething() { // Do some work } In this example, the doSomething function is executed in a separate goroutine by using the go keyword. This means that the main function can continue to execute other code without waiting for doSomething to finish. This can be incredibly useful when working with long-running or CPU-intensive tasks. It allows you to take advantage of all available CPU cores and keep your application responsive. However, it's essential to remember that concurrency and parallelism introduce new challenges and complexities, such as data races and deadlocks. So it's vital to be familiar with the GoLang concurrency model and best practices for handling these issues.","metadata":{"source":"https://blog.soumendrak.com/concurrency-and-parallelism-in-go","title":"Concurrency and parallelism in Go","contentLength":181}},{"pageContent":"One feature that makes GoLang unique is its support for multiple return values from a function. This can be very useful in various situations, such as error handling, parsing data, and returning multiple values from a computation. For example, let's say you have a function that needs to parse a string into an integer and return both the integer value and an error if the line cannot be parsed. It would be best to use an out parameter or an exception in many languages to handle the error case. But in GoLang, you can return both the integer and the error as different values, like this: func parseInt(s string) (int, error) { i, err := strconv.Atoi(s) if err != nil { return 0, err } return i, nil } In this example, the strconv.Atoi function parses the string s into an integer i, and returns an error if the string cannot be parsed. The parseInt function checks for the error and returns the integer and error as separate values. This pattern of returning multiple values is used extensively throughout the GoLang standard library and can be very powerful in your code. Using multiple return values, you can make your code more concise and expressive and easily handle errors and other complex situations.","metadata":{"source":"https://blog.soumendrak.com/multiple-return-values-from-a-function","title":"Multiple return values from a function","contentLength":211}},{"pageContent":"In recent years, open-source software has become a significant part of the technology industry. With many companies and individuals turning to open source for their software needs, the benefits of this type of software are becoming more apparent. In this post, we will explore the benefits of open-source software, why it is essential, and how to get involved. Benefits of Open Source Software: Lower Cost: Open-source software provides a significant advantage of cost-effectiveness compared to proprietary software, making it accessible to a broader audience. For instance, instead of spending hundreds of dollars on proprietary software, a small business can use free, open-source software like LibreOffice, which offers similar features to Microsoft Office. Customizability: Open-source software's high level of customizability allows users to tailor the software to their specific requirements, offering numerous advantages over proprietary software that does not permit modification. For instance, users can modify the code to change the software's functionality, add new features, or remove unwanted ones. Some examples of open-source software that can be customized include WordPress, where users can modify themes, plugins, and the core software, and Linux operating system, where users can customize every aspect of the software, including the desktop environment, kernel, and applications. Developers can also use open-source libraries and frameworks to create custom software applications that meet their unique needs. Transparency: Open-source software's transparency allows the source code to be accessible for viewing by anyone, resulting in quick identification and resolution of issues. Additionally, transparency enables users to understand the software's functionality, empowering them to make informed decisions on whether to use it. Here are some examples of open-source software with transparent source code: Firefox browser: The source code is open for anyone to view, and users can contribute to the software's development. Android mobile operating system: Android's source code is available to the public, allowing anyone to view it and modify it. Apache web server: As open-source software, Apache's source code is transparent, allowing developers to modify it as needed. VLC media player: The source code for VLC is available to the public, allowing users to view and modify it. Blender 3D software: The source code is open, allowing developers to modify the software's features and improve its functionality. Community Support: Open-source software development is often community-driven, resulting in a large pool of experts who can support and guide users. Here are some examples of open-source software with active developer communities: WordPress: WordPress is an open-source content management system with a massive community of developers and users who offer support and guidance through forums, online tutorials, and documentation. Git: Git is an open-source version control system widely used by software developers worldwide, with a vast community of contributors who offer support through online forums and documentation. Drupal: Drupal is an open-source content management system with an active developer community that offers users support, guidance, and resources. Python: Python is an open-source programming language with a large community of developers who contribute to its development and offer support to users through online forums and documentation. Ubuntu: Ubuntu is an open-source operating system with a large community of developers and users who contribute to its development and provide support through online forums and documentation. Why Open Source is Important Innovation: Open-source software is a significant driver of innovation. By allowing users to modify and improve the software, new features, and capabilities can be developed quickly, leading to more important technological advancements. Access to Technology: Open source software allows access to technology to people who may not have the resources to purchase proprietary software. This means that more people can benefit from technological advances, regardless of their financial situation. Collaboration: Open source software encourages cooperation and sharing of knowledge. This creates a community of developers who work together to improve the software and share their ideas and expertise. How to Get Involved Use Open Source Software: The easiest way to get involved in open source is to start using open source software. Many different types of open-source software are available, from operating systems to productivity software. Contribute to Open Source Projects: Many open source projects seek contributors. You can contribute by providing feedback, writing code, testing software, or helping to document the software. Start Your Project: If you have an idea for a new open-source project, start yours. Many resources are available online to help you get started, and you can start by working on the project yourself or by recruiting others to help you. Summary Open-source software is an essential part of the technology industry. It provides access to technology to more people, encourages collaboration and knowledge sharing, and drives innovation. Getting involved in open source is easy, and there are many ways to contribute. Whether you start by using open-source software or by contributing to an existing project, getting involved in open-source is a great way to support the development of technology and positively impact the world.","metadata":{"source":"https://blog.soumendrak.com/advantages-of-open-source-software","title":"Advantages of Open source software","contentLength":848}},{"pageContent":"We will discuss the upcoming LLMs (Large Language Models like ChatGPT) in 2023. Claude by Anthropic As per their research paper, it is a 52B parameter, Autoregressive pre-trained model. Made by ex-OpenAI employees, Google has invested $300 million in this startup to get a 10% stake in the company and make 'Google cloud' the preferred one for Claude. (ChatGPT uses Microsoft Azure) Check out this article for a detailed response comparison with Claude's initial version and chatGPT. Bard by Google Google is under pressure from investors to release its ChatGPT equivalent. Also, Microsoft's rival search engine, Bing, plans to incorporate GPT-4 into its search experience. LaMDA, the sentient chatbot, can help Google address these concerns, and CEO Sundar Pichai is already working on it. Sparrow by Deepmind: Sparrow is a research model and proof of concept designed with the goal of training dialogue agents to be more helpful, correct, and harmless. It is not publicly available and is used for research purposes. Ernie by Baidu Ernie, an acronym for Enhanced Representation through Knowledge Integration, has been developing since 2019. Internal testing will complete in March. Initially, it will be launched as a standalone App before integrating with the Baidu search engine. Stability AI: They are working on an open-source ChatGPT. With the rise of LLMs, users will have more choices, which is a good thing. So let's see who can have extra features, reliable infra, and fine-tuned answers based on the need of the users.","metadata":{"source":"https://blog.soumendrak.com/chatgpt-alternatives","title":"ChatGPT Alternatives","contentLength":253}},{"pageContent":"TL;DR A Guide to the Amazon Recruiting Process: What to Expect and How to Get Ready - This article outlines the Amazon recruiting process, what to expect, and how to prepare. It includes a breakdown of the interview rounds, the topics discussed, and the outcome. It also provides tips on preparing for the Amazon Leadership Principle rounds and a conclusion. How I landed up with an interview call? One of my friends on the org referred me for this post. As always, I was not prepared to qualify for a FAANG interview when the recruiter called me. She should be, and the people are mad about FAANG companies even after they kicked out thousands of employees like no one. Interview details Job Position: System Development Engineer (L5) Interview Process: There will be 1 round; if you qualify that there will be 3-4 more rounds, then the results will be announced by HR. It was not series-like crossing level after level, unlike my previous interviews. Years of experience at the time of applying: 9 Total number of rounds: 7 Outcome: Offered 🙂 First round (Litmus test) June 2021, Telephonic Chime (like Skype) call My first round of discussion was with a system development engineer who has worked for amazon for over two years. She has asked me questions on the followings: We discussed my experiences in UI tools, Python, Network Automation script writing, Auditing, Infrastructure automation, and AWS Cloud. Context Manager and in which case will you be using a context manager and in which case a decorator; excellent question. Garbage collector behind the scenes. Two short coding problems Write a timer decorator and write a unit test case for that. Write a class that takes a first name, last name, and age as parameters Auto-populate the creation date and return the name and age of each object with the proper __str***__*** method. I cleared this round. Second round (ALP) After a week of the first round. In this round, we did behavioral discussions based on Amazon leadership principles(ALP) and something along the line of: AWS components: ECS, Lambda, DynamoDB, Quickshift API gateway Agile methodologies Third round (ALP) One day after the second round. The interviewer joined the call 10 minutes late. In this round, we have discussed on few Amazon leadership principles: Tell me when you did XYZ leadership principle in your past and what went well, and what could have been done better. Preparing stories for ALP rounds is essential. To optimize your account, including all relevant details of what you have done in the past. If needed, add a little extra information to shape the story better. As an interviewer, if the candidate is not strong, they may be caught bluffing if you probe the WHYs of the story. Fourth round (API Designing) One day after the third round. We discussed my skills on the following topics: Error Debugging ECS, Cloudwatch, Application maintenance Monolithic and distributed server; why and hows Designing an API that involved network devices, laptops, scanners, and IoTs. It went well. We got our thought process aligned on many points. Fifth round (System Designing) One week after the fourth round. The interviewer was severe, and the first thing that came out of his mouth was a question like a bullet. We discussed the followings: Design a system with N hosts/servers at M number of sites/locations. You have to schedule a job on the host to pull camera footage from the server and save it locally for human export. The server count and the location count can be received from another service. You cannot schedule multiple jobs per host at any given time. The camera data currently lives locally on each server for the cameras it handles, and we have frequent adds and deletes. We discussed the above problem throughout: Data Flow Map of camera, host, and location Website to server API payload Deletion or Addition of Camera Backend DB Queue User roles in the system His general advice: Do not settle and always aim for the sky Be open to feedback and act upon them The discussion was ok. I did not excel with flares. On the other hand, it was not pathetic either. Sixth round (ALP) This round was rescheduled for three times, and finally, on the fourth, the force acted in my favor two weeks after the fifth round. ALP's theme was Invent and Simplify. Which has probable questions like this: Tell me about a time when you invented something. What improvements have you made at your current company? Tell me about a time when you gave a simple solution to a complex problem. Tell me about a time you had to think outside the box (think creatively) to close a sale or sell your product. What is the most innovative project you've worked on? Coding Question After these questions, I got a follow-up problem to solve. Q. Given a 100MB log file that looks like this: charles=3918alice=0bob=100charles=3918django=77alice=0erik=0charles=4231 Write a program that removes the duplicate lines and sorts the pairs by value.* value is the integer assigned; duplicate lines are defined by the full-text line, not the key. I have written one with all logs, Exception handling, and Edge case handling. This interviewer was more empathetic and logical than the rest of the interviewees so far. Seventh round (HR) The HR explained RSU, ESOP, Shares, and Prorated concepts to me. I negotiated and requested to give me some time to decide. The Offer 🙂 Finally, I got an offer from a FAANG company. (Do we care after the 2022 Layoffs?) Lessons Learnt Prepare the use cases well for the Leadership principles Conclusion We have discussed my first interview experience, where I got an offer on this platform. We have discussed the different rounds and processes in Amazon. You can ask me any specific questions over LinkedIn or Twitter.","metadata":{"source":"https://blog.soumendrak.com/a-guide-to-the-amazon-recruiting-process-what-to-expect-and-how-to-get-ready","title":"A Guide to the Amazon Recruiting Process: What to Expect and How to Get Ready","contentLength":992}},{"pageContent":"We already know what chatGPT is, here are a few Twitter threads on how to utilize chat GPT to its fullest. https://twitter.com/jspeiser/status/1609912415289761795?s=20 https://twitter.com/thealexbanks/status/1611365551481446406 https://twitter.com/thesyedhuq/status/1610321340338434054 https://twitter.com/danshipper/status/1611134727011844098 https://twitter.com/heyBarsee/status/1611626536343412737?s=20 https://twitter.com/AtOnceCo/status/1609555052275834880 https://twitter.com/BrianFOConnor/status/1603032772804857856 https://twitter.com/HBCoop_/status/1603814980700323854 https://twitter.com/volodarik/status/1600854935515844610 https://twitter.com/GrammarHippy/status/1608137421971152899?s=20 https://twitter.com/scottcmillard/status/1608519748605644800 https://twitter.com/bentossell/status/1598269692082151424 https://twitter.com/thesyedhuq/status/1607784625572827139 https://twitter.com/alliekmiller/status/1602745470584967170 If you want to know various open-source tools developed for ChatGPT, you may check my following article: ChatGPT resources (soumendrak.com)","metadata":{"source":"https://blog.soumendrak.com/use-chat-gpt-as-a-pro","title":"Maximizing ChatGPT's Capabilities for Increased Productivity","contentLength":133}},{"pageContent":"uBlock origin You can remove the Ads from YouTube.com by just installing an AdBlocker in your browser. - I recommend open-source AdBlocker \"uBlock origin.\" https://github.com/gorhill/uBlock Video Speed Controller - \"Video Speed Controller\" enables you to go beyond 2x speed; you can watch boring lectures faster by using this extension. - It also works on any video playing on your browser besides YouTube. https://github.com/igrigorik/videospeed FreeTube - FreeTube is a YT desktop client (not a browser extension) built around using YT more privately. - You can enjoy your favorite content and creators without your habits being tracked and Ads. - You do not need to sign in but can import your subscriptions. https://github.com/FreeTubeApp/FreeTube SponsorBlock - \"SponsorBlock\" is an open-source crowdsourced browser extension for skipping sponsor segments in YT videos. - Users submit when a sponsor happens from the extension, & the extension automatically skips sponsors. https://github.com/ajayyy/SponsorBlock We have gone through the following extensions: uBlock origin Video speed controller Free tube and SponsorBlock Follow me for more search articles.","metadata":{"source":"https://blog.soumendrak.com/top-open-source-youtube-extensions-in-2023","title":"Top Open source YouTube Extensions in 2023","contentLength":176}},{"pageContent":"Explore the Most Common Built-In Errors in Python – Complete with Code Examples! Python is a universal language with many powerful features, but it can also throw various errors when your code encounters an issue. Here is an overview of some of the most common built-in errors in Python, complete with code examples to illustrate how they can occur. SyntaxError: This error is raised when the Python interpreter encounters invalid syntax in your code. For example, if you forget to close a parenthesis, you may see a SyntaxError. # Example of a SyntaxError def greet(name): print(\"Hello, \" + name # missing parenthesis mark at the end greet(\"John\") TypeError: This error is raised when you try to operate on an object of an incorrect type. For example, if you try to add a string and an integer, you will get a TypeError. # Example of a TypeError a = \"5\" b = 10 print(a + b) # cannot concatenate a string and an int ------------------------------------------------------ TypeError: can only concatenate str (not \"int\") to str NameError: This error is raised when you try to access a variable that has not been defined. For example, if you try to use a variable you forgot to assign a value to, you will get a NameError. # Example of a NameError print(x) # x has not been defined ---------------------------------- NameError: name 'x' is not defined IndexError: This error is raised when you try to access a list or string using an out-of-bounds index. For example, if you try to access the fifth element of a list with only three parts, you will get an IndexError. # Example of an IndexError numbers = [1, 2, 3] print(numbers[4]) # index 4 is out of bounds for the list ---------------------------------------------------------- IndexError: list index out of range KeyError: This error is raised when you try to access a dictionary using a key that does not exist in the dictionary. For example, if you try to access a value using a key that has not been added to the dictionary, you will get a KeyError. # Example of a KeyError colors = {\"red\": \"#ff0000\", \"green\": \"#00ff00\"} print(colors[\"blue\"]) # \"blue\" is not a key in the dictionary -------------------------------------------------------------- KeyError: 'blue' ValueError: This error is raised when you pass a value of the wrong type to a function or method. For example, if you try to convert a string to an integer using the int() function and the string cannot be parsed as an integer; you will get a ValueError. # Example of a ValueError age = \"twenty\" int(age) # cannot convert the string \"twenty\" to an int ------------------------------------------------------------ ValueError: invalid literal for int() with base 10: 'twenty' Understanding and handling Python's built-in errors can help you write more reliable and robust programs. Learn about common Python errors and how to debug them for better coding. To get the complete list of Exceptions, check out the documentation, Built-in Exceptions — Python 3.11.1 documentation. The hierarchy of the built-in exceptions: BaseException ├── BaseExceptionGroup ├── GeneratorExit ├── KeyboardInterrupt ├── SystemExit └── Exception ├── ArithmeticError │ ├── FloatingPointError │ ├── OverflowError │ └── ZeroDivisionError ├── AssertionError ├── AttributeError ├── BufferError ├── EOFError ├── ExceptionGroup [BaseExceptionGroup] ├── ImportError │ └── ModuleNotFoundError ├── LookupError │ ├── IndexError │ └── KeyError ├── MemoryError ├── NameError │ └── UnboundLocalError ├── OSError │ ├── BlockingIOError │ ├── ChildProcessError │ ├── ConnectionError │ │ ├── BrokenPipeError │ │ ├── ConnectionAbortedError │ │ ├── ConnectionRefusedError │ │ └── ConnectionResetError │ ├── FileExistsError │ ├── FileNotFoundError │ ├── InterruptedError │ ├── IsADirectoryError │ ├── NotADirectoryError │ ├── PermissionError │ ├── ProcessLookupError │ └── TimeoutError ├── ReferenceError ├── RuntimeError │ ├── NotImplementedError │ └── RecursionError ├── StopAsyncIteration ├── StopIteration ├── SyntaxError │ └── IndentationError │ └── TabError ├── SystemError ├── TypeError ├── ValueError │ └── UnicodeError │ ├── UnicodeDecodeError │ ├── UnicodeEncodeError │ └── UnicodeTranslateError └── Warning ├── BytesWarning ├── DeprecationWarning ├── EncodingWarning ├── FutureWarning ├── ImportWarning ├── PendingDeprecationWarning ├── ResourceWarning ├── RuntimeWarning ├── SyntaxWarning ├── UnicodeWarning └── UserWarning","metadata":{"source":"https://blog.soumendrak.com/python-built-in-exceptions","title":"Understanding Python's Pre-Constructed Exceptions for Beginners","contentLength":558}},{"pageContent":"Go is a popular programming language known for its simplicity, concurrency support, and efficient memory management. Whether new to programming or an experienced developer, Go is a great language to learn. This blog post will cover the basics of getting started with Go. Setting up Go The first step to using Go is to install it on your machine. You can download the latest stable version of Go from the official website at https://go.dev/dl/. Then, follow the installation instructions for your operating system to set it up. Once Go is installed, you can test your installation by running the following command in your terminal: go version This should display the version of Go that you have installed. Your First Go Program Now that Go is installed let's create our first Go program. Create a new file called main.go and add the following code: package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } This simple Go program prints \"Hello, World!\" to the terminal. To run the program, use the go run command: go run main.go You should see \"Hello, World!\" printed on the terminal. Go Syntax Go has a simple and easy-to-learn syntax. Some of the key features of Go syntax include the following: Go is a statically-typed language, meaning variables must be declared with a specific type before they can be used. Go uses camelCase for naming variables and functions, with the first letter of the name in lowercase and the first letter of subsequent words in uppercase. Go uses curly braces to denote blocks of code, and indentation is used to indicate nested blocks. Go has built-in support for concurrency using goroutines and channels. Go Packages In Go, a package is a collection of related Go source files compiled together. The main the package is the entry point of a Go program and must contain a main function. Go has an extensive standard library with a wide range of packages for tasks such as input/output, networking, and cryptography. You can also import external packages from other Go developers or create your packages. To import a package, you can use the import statement at the top of your Go source file: import \"fmt\" This imports the fmt package, which contains functions for formatting input and output. Conclusion This blog post covered the basics of getting started with Go. Then, we installed Go on our machine, created our first Go program, and learned about the syntax and packages in Go. Go has a simple and consistent syntax, making it easy to learn for beginners. Some basic concepts include variables, types, functions, and control structures like loops and conditionals. There are also many resources available online for learning to Go, including the official Go documentation (https://go.dev/doc/) and tutorial (https://go.dev/tour/welcome/1) There is much more to learn about Go, but this should give you an excellent foundation to start from.","metadata":{"source":"https://blog.soumendrak.com/go-lets-start","title":"Go: Let's start","contentLength":496}},{"pageContent":"In Python, the backslash (\\) character is used for several purposes, such as: To specify escape sequences, like \\n for a new line, \\t for a tab, etc. To escape special characters - the backward slash is used to escape special characters such as quotation marks and newline characters in strings. For example: # escaping special characters in a string my_string = \"This is a string with a \\\"quotation mark\\\" and a newline character \\n in it\" print(my_string) Split a string into multiple lines using the \\ character at the end of each line. For example, the following code will print hello world on two lines: # continuing a line of code print(\"This is a very long line of code that cannot fit on one line\" \\ \"so we are using the backward slash to continue it on the next line\") It's important to note that in Python, the backslash character is used for escaping characters, and it is not the same as the forward-slash (/) character, which is used for division. For example, the following code will print 5.0: print(10 / 2) You may further be interested in the following: Usage of forward slash (/) in Python Five usages of an asterisk (*) in Python Usage of the Underscore(_) in Python","metadata":{"source":"https://blog.soumendrak.com/usage-of-backward-slash-in-python","title":"The Importance of Backward Slashes in Python and How to Use Them","contentLength":208}},{"pageContent":"Array and slice are two important data structures in Go that are used to store and manipulate sequences of values. Although they may appear similar at first glance, some key differences between the two are worth understanding. An array is a fixed-size data structure that stores a sequence of values of the same type. It is allocated with a specific size that cannot be changed after its creation. For example, the following code creates an array of 5 integers: var myArray [5]int An array is accessed using its index, a zero-based integer value that specifies the element's position in the array. For example, to access the first element in the array, we can use the following code: myArray[0] An array is a value type, which means that a copy of the array is created when it is passed to a function or assigned to a variable. This can have significant performance implications if the array is substantial, as copying the entire array can take time and memory. On the other hand, a slice is a variable-size data structure that references a portion of an array. A slice is declared using the []type syntax and is dynamically resized according to the program's needs. For example, the following code creates a slice of 5 integers: mySlice := []int{1, 2, 3, 4, 5} A slice is accessed using a range, which is a pair of values that specify the start and end indices of the slice. For example, to access the first three elements in the slice, we can use the following code: mySlice[0:3] Unlike an array, a slice is a reference type, meaning that only a reference to the slice is created when it is passed to a function or assigned to a variable. This can have some performance benefits if the slice is significant, as copying only a reference is much faster and requires less memory. Another critical difference between an array and a slice is how they are passed to a function. An array is passed by value, meaning a copy of the array is created and passed to the function. This can have significant performance implications if the array is substantial, as copying the entire array can take time and memory. On the other hand, a slice is passed by reference, which means that only a reference to the slice is passed to the function. Again, this can have some performance benefits if the slice is significant, as copying only a reference is much faster and requires less memory. Differences These are the differences between arrays and slices in the Go programming language. An array is a fixed-size data structure that stores a sequence of values of the same type. On the other hand, a slice is a variable-size data structure that references a portion of an array. An array is allocated with a specific size, which cannot be changed after creation. A slice, on the other hand, can be dynamically resized. An array is accessed using its index, while a slice is accessed using a range. An array is a value type, while a slice is a reference type. An array is passed by value to a function, while a slice is passed by reference. An array is declared using the [size]type syntax, while a slice is displayed using the []type syntax. // Declare and initialize an array of 5 integers arr := [5]int{1, 2, 3, 4, 5} // Declare and initialize a slice of integers slice := []int{1, 2, 3, 4, 5} Usage Arrays are used when the size of the data is known in advance and is not expected to change. This allows for efficient memory allocation and access. Examples include storing a list of student names or a deck of cards. Slices are used when the data size is not known in advance or is expected to change. This allows for more flexible and dynamic data manipulation. Examples include working with a subset of data from an array, such as the first ten elements, or dynamically adding and removing elements from a list. Conclusion Array and slice are two important data structures in Go that are used to store and manipulate sequences of values. While both provide similar functionality, some critical differences are worth understanding. First, an array is a fixed-size data structure that stores a series of values of the same type, while a slice is a variable-size data structure that references a portion of an array. An array is a value type, while a slice is a reference type. Finally, an array is passed by value to a function, while a slice is passed by reference. Understanding these differences can help you choose the proper data structure for your needs and write more efficient and effective Go code.","metadata":{"source":"https://blog.soumendrak.com/go-arrays-vs-slices","title":"Go: Arrays vs Slices","contentLength":808}},{"pageContent":"This is a consolidation live data source for all developments and tools built around chatGPT. https://openai.com/blog/chatgpt/ https://github.com/f/awesome-chatgpt-prompts Python https://github.com/acheong08/ChatGPT https://github.com/rawandahmad698/PyChatGPT https://github.com/altryne/chatGPT-telegram-bot https://github.com/Zero6992/chatGPT-discord-bot https://github.com/cesarhuret/docGPT GoLang https://github.com/m1guelpf/chatgpt-telegram https://github.com/danielgross/whatsapp-gpt Rust https://github.com/sonnylazuardi/chatgpt-desktop https://github.com/lencx/ChatGPT Javascript https://github.com/ZohaibAhmed/ChatGPT-Google https://github.com/vincelwt/chatgpt-mac https://github.com/liady/ChatGPT-pdf Typescript https://github.com/transitive-bullshit/chatgpt-api https://github.com/fuergaosi233/wechat-chatgpt https://github.com/mpociot/chatgpt-vscode https://github.com/wong2/chat-gpt-google-extension Java https://github.com/LiLittleCat/intellij-chatgpt This page will be depreciated and it will be replaced by: https://github.com/humanloop/awesome-chatgpt Let me know what you think at any of the following places: 🔗 LinkedIn: linkedin.com/in/soumendrak 📝 Medium: medium.com/@soumendrak 📖 Blog: blog.soumendrak.com 🐥 Twitter: twitter.com/soumendrak_ 🧑🏻‍💻 Github: github.com/soumendrak","metadata":{"source":"https://blog.soumendrak.com/chatgpt-resources","title":"ChatGPT resources","contentLength":186}},{"pageContent":"These are the procedures that can be followed: Identify the issue. Clearly define the problem and gather relevant information, such as error messages or code snippets. Get the logs. Break down the issue into smaller, manageable parts. This can help identify the root cause more efficiently and avoid oversimplifying the problem. Analyze each part of the issue in turn. For example, use tools such as debugging techniques, breakpoints, and code analysis tools to identify potential causes of the problem. Eliminate potential causes that are not related to the problem. This can help narrow the focus and make it easier to pinpoint the root cause. Test potential root causes to see if they are the actual cause of the issue. This can involve modifying code or running experiments to see if the problem is resolved. Once the root cause is identified, develop a plan to fix the problem. This can involve modifying the code, implementing a new solution, or using a different programming language or framework. Implement the solution and test it to ensure the issue is resolved. This can involve running automated tests or manually testing the code to verify that the problem has been fixed. Document the root cause analysis and the steps taken to fix the issue. This can help prevent future issues and provide a reference for others who may encounter similar problems. Documentation is a major part of solving issues.","metadata":{"source":"https://blog.soumendrak.com/finding-rca-of-an-issue","title":"Finding RCA of an Issue","contentLength":234}},{"pageContent":"In Python, the forward slash (/) has several different uses depending on the context in which it appears. Some of the primary benefits of the forward slash in Python include: Division When used between two numeric values, the forward slash performs division. For example, 10 / 3 evaluates to 3.3333333333333335. >>> 10/3 3.3333333333333335 Floor division When used between two numeric values, the forward slash followed by another forward slash (//) performs floor division, which rounds the result down to the nearest integer. For example, 10 / 3 evaluates to 3, and 10 // 3 evaluates to 3. >>> 10//3 3 Paths In strings, the forward slash is often used as a separator in file paths or URLs. For example: path = \"C:/Users/john/Documents/file.txt\" url = \"https://www.example.com/path/to/resource\" Regular expressions The forward slash is often used to escape special characters in regular expressions. For example: import re pattern = r\"\\d+/\\d+/\\d+\" text = \"The date is 01/01/2021\" match = re.search(pattern, text) Thanks for reading; you can further check the following: Five usages of an asterisk (*) in Python Usage of the Underscore(_) in Python","metadata":{"source":"https://blog.soumendrak.com/usage-of-forward-slash-in-python","title":"Usage of forward slash (/) in Python","contentLength":190}},{"pageContent":"ଏକଦା ଗ୍ରାମୀଣ ଆମେରିକାର ଗଡ଼ୁଥିବା ପାହାଡରେ ଅବସ୍ଥିତ ଏକ ଛୋଟ ସହରରେ ଜନ୍ ଏବଂ ସାରା ନାମକ ଏକ ଯୁବକ ଦମ୍ପତି ଥିଲେ । ସେମାନେ ପିଲାଦିନରୁ ପରସ୍ପରକୁ ଜାଣିଥିଲେ, ଏବଂ ବୟସ ବଢିବା ସହିତ ସେମାନଙ୍କର ବନ୍ଧୁତା ଅଧିକ କିଛିରେ ପରିଣତ ହେଲା । କିନ୍ତୁ ସେମାନଙ୍କର ପ୍ରେମକୁ ସମସ୍ତେ ସ୍ୱାଗତ କରିନଥିଲେ । ସାରାଙ୍କ ପିତାମାତା ସମ୍ପ୍ରଦାୟର ସମ୍ଭ୍ରାନ୍ତ ଏବଂ ସମ୍ମାନିତ ସଦସ୍ୟ ଥିଲେ, ଏବଂ ସେମାନେ ସର୍ବଦା ଆଶା କରୁଥିଲେ ଯେ ସେମାନଙ୍କ ଝିଅ ସମାନ ପୃଷ୍ଠଭୂମିରୁ କାହାକୁ ବିବାହ କରିବ । ଅପରପକ୍ଷରେ ଜନ୍ ଜଣେ ଗରିବ କୃଷକଙ୍କ ପୁଅ ଥିଲେ ଏବଂ ସାରାଙ୍କ ପିତାମାତାଙ୍କ ପାଇଁ ସେ ସେମାନଙ୍କ ଝିଅ ପାଇଁ ଯଥେଷ୍ଟ ଭଲ ନଥିଲେ। ସେମାନଙ୍କ ପରିବାରର ଆପତ୍ତି ସତ୍ତ୍ୱେ ଜନ୍ ଏବଂ ସାରା ଏକାଠି ରହିବାକୁ ସ୍ଥିର କରିଥିଲେ। ସେମାନେ ଜାଣିଥିଲେ ଯେ ସେମାନଙ୍କର ପ୍ରେମ ବାସ୍ତବ ଏବଂ ଯଦି ସେମାନେ ଏକାଠି କାମ କରନ୍ତି ତେବେ ସେମାନେ ଯେକୌଣସି ବାଧାବିଘ୍ନକୁ ଅତିକ୍ରମ କରିପାରିବେ । ତେଣୁ, ସେମାନେ ପଳାୟନ ଏବଂ ଗୁପ୍ତରେ ବିବାହ କରିବାକୁ ଏକ ଯୋଜନା କରିଥିଲେ । ଏକ ଉଷ୍ମ ଗ୍ରୀଷ୍ମ ରାତିରେ, ସେମାନେ ନିଜ ଘରୁ ବାହାରକୁ ଯାଇ ସହରର ଉପକଣ୍ଠରେ ଭେଟିଲେ । ସେମାନେ ଜନ୍ ଙ୍କ ପୁରୁଣା ପିକ୍ ଅପ୍ ଟ୍ରକ୍ ଭିତରକୁ ଚଢି କୋର୍ଟକୁ ଯାଇଥିଲେ, ଯେଉଁଠାରେ ସେମାନେ ଶାନ୍ତିର ନ୍ୟାୟ ସାମ୍ନାରେ ଶପଥ ବିନିମୟ କରିଥିଲେ । କିଛି ବର୍ଷ ପରେ ସେମାନଙ୍କର ଲିଲି ନାମକ ଏକ ଶିଶୁ କନ୍ୟା ଜନ୍ମ ନେଇଥିଲା । ସେମାନେ ଏକ ଖୁସି ସ୍ନେହୀ ଛୋଟ ପରିବାର ଥିଲେ । ପ୍ରଥମେ, ଯୁବକ ଦମ୍ପତିଙ୍କ ପାଇଁ ଜିନିଷଗୁଡ଼ିକ ଚମତ୍କାର ଥିଲା । ସେମାନେ ଆନନ୍ଦରେ ଖୁସି ଥିଲେ, ଏବଂ ଅନ୍ୟ କେହି ସେମାନଙ୍କ ବିବାହ ବିଷୟରେ କ'ଣ ଭାବନ୍ତି ତାହା ସେମାନେ ଚିନ୍ତା କଲେ ନାହିଁ । କିନ୍ତୁ ସମୟ ବଢିବା ସହିତ ଜୀବନର ବାସ୍ତବତା ସେମାନଙ୍କର ପ୍ରଭାବ ପକାଇବାକୁ ଲାଗିଲା । ଜନ୍ କାମ ଖୋଜିବା ପାଇଁ ସଂଘର୍ଷ କରିଥିଲେ, ସେ ଓଜନ ବଢାଇଛନ୍ତି ଏବଂ ଏହି ଦମ୍ପତି କ୍ୱଚିତ୍ ରୋଜଗାର କରିବାକୁ ସକ୍ଷମ ହୋଇଥିଲେ । ସାରାଙ୍କ ପିତାମାତା ସେମାନଙ୍କୁ ସାହାଯ୍ୟ କରିବାକୁ ମନା କରିଦେଇଥିଲେ, ଏବଂ ଦମ୍ପତି ଏବଂ ସେମାନଙ୍କ ଝିଅ ସହର ଉପକଣ୍ଠରେ ଏକ ରନ୍ ଡାଉନ୍ ଟ୍ରେଲରରେ ରହିବାକୁ ବାଧ୍ୟ ହୋଇଥିଲେ। କ୍ରମାଗତ ଚାପ ଏବଂ ସଂଘର୍ଷ ସେମାନଙ୍କ ସମ୍ପର୍କ ଉପରେ ପିନ୍ଧିବାକୁ ଲାଗିଲା, ଏବଂ ଜନ୍ ଏବଂ ସାରା ଅଧିକରୁ ଅଧିକ ଯୁକ୍ତିତର୍କ କରିବାକୁ ଲାଗିଲେ । ସେମାନେ ଏକାଠି ସମୟ ବିତାଇବା ବନ୍ଦ କରିଦେଲେ ଏବଂ ପରସ୍ପରଠାରୁ ଦୂରେଇଗଲେ । ଦିନେ, ଏକ ବିଶେଷ ତୀବ୍ର ଯୁକ୍ତିତର୍କ ପରେ, ଜନ୍ ଟ୍ରେଲରରୁ ବାହାରକୁ ଆସି ଫେରିନଥିଲେ । ସାରା ହୃଦୟ ବିଦାରକ ହୋଇଥିଲେ, କିନ୍ତୁ ସେ ଜାଣିଥିଲେ ଯେ ସେମାନଙ୍କର ବିବାହ ଶେଷ ହୋଇଛି । ସେ ଛାଡପତ୍ର ପାଇଁ ଆବେଦନ କରିଥିଲେ, ଏବଂ କିଛି ମାସ ପରେ, ଏହା ଚୂଡ଼ାନ୍ତ ହୋଇଥିଲା । ସାରା ଜନ୍ ଙ୍କ ସହ ଲିଲି ଛାଡିଥିଲେ । ଶେଷରେ, ଜନ୍ ଏବଂ ସାରା ଉଭୟ ବିବାହ ନିଷ୍ପତ୍ତି ପାଇଁ ଦୁଃଖିତ ହୋଇଥିଲେ । ସେମାନେ ହୃଦୟଙ୍ଗମ କଲେ ଯେ ସେମାନେ ପରସ୍ପର ପ୍ରତି ସେମାନଙ୍କର ପ୍ରେମକୁ ସେମାନଙ୍କ ପରିସ୍ଥିତିର ବାସ୍ତବତା ପ୍ରତି ଅନ୍ଧ କରିଦେଇଛନ୍ତି, ଏବଂ ସେମାନେ ସମାଜ ଏବଂ ସେମାନଙ୍କ ପିତାମାତା ସେମାନଙ୍କ ରାସ୍ତାରେ ରଖିଥିବା ପ୍ରତିବନ୍ଧକକୁ ଦୂର କରିବାରେ ଅସମର୍ଥ ହୋଇଛନ୍ତି । କିନ୍ତୁ ବହୁତ ବିଳମ୍ବ ହୋଇଯାଇଥିଲା । ସେମାନଙ୍କର ବିବାହ ସମାପ୍ତ ହୋଇଥିଲା, ଏବଂ ସେମାନେ ସେମାନଙ୍କର ଭାଙ୍ଗି ଯାଇଥିବା ଜୀବନର ଖଣ୍ଡଗୁଡ଼ିକୁ ଉଠାଇବା ଏବଂ ଆଗକୁ ବଢିବାକୁ ଛାଡି ଦିଆଯାଇଥିଲା । Let me know what you think at any of the following places: 🔗 LinkedIn: linkedin.com/in/soumendrak 📝 Medium: medium.com/@soumendrak 📖 Blog: blog.soumendrak.com 🐥 Twitter: twitter.com/soumendrak_ 🧑🏻‍💻 Github: github.com/soumendrak 📹 Youtube: youtube.com/@openodia","metadata":{"source":"https://blog.soumendrak.com/situation-reality","title":"ପରିସ୍ଥିତିର ବାସ୍ତବତା","contentLength":37}},{"pageContent":"Several design patterns are commonly used in Python programming. Some of the most common design patterns include: Singleton: This design pattern ensures that a class has only one instance and provides a global point of access to it. Factory: This design pattern provides a way to create objects without specifying the exact class of thing that will be made. Adapter: This design pattern allows classes with incompatible interfaces to work together by wrapping the original class and providing a new interface. Decorator: This design pattern allows new functionality to be added to an existing object without modifying its structure. Observer: This design pattern allows objects to observe and react to changes in other objects. Strategy: This design pattern allows the behavior of an algorithm to be changed at runtime. Template: This design pattern defines the skeleton of an algorithm, allowing subclasses to provide specific implementation details. Command: This design pattern allows you to encapsulate a request as an object, separating it from the object executing it. These are just a few examples of the many design patterns available in Python. Many more design patterns can be used to solve common programming problems in Python. Choosing the correct design pattern for a given situation can help make your code more maintainable and scalable. The factory design pattern is a popular object-oriented programming technique in Python. It is used to create new objects, hiding the complexity of object creation from the user. This allows for a more flexible and modular approach to object creation and promotes code reuse. The factory design pattern works by defining a factory class that is responsible for creating objects. The factory class has a method, typically called create(), that takes in the necessary parameters for creating an object and returns the newly created object. The user of the factory class does not need to know the details of how the object is created; they call the create() method and get back the new object. One of the key benefits of using the factory design pattern is that it allows for creating objects without specifying their exact class. This means that the factory can create different types of objects depending on the input provided to the create() method. This is useful when working with systems with various implementations of the same concept, such as other types of vehicles in a transportation application. Another benefit of the factory design pattern is that it promotes code reuse. Since the factory class abstracts away the details of object creation, it can create objects of different types without duplicating code. In addition, this means that the code for creating things can be centralized in the factory class, making it easier to maintain and update. To illustrate how the factory design pattern works in Python, let's consider a simple example. Suppose we have a Vehicle class that represents different types of vehicles, such as cars and trucks. Then, we can use the factory design pattern to create instances of the Vehicle class by defining a VehicleFactory class. class Vehicle: def __init__(self, type, model, year): self.type = type self.model = model self.year = year class VehicleFactory: @staticmethod def create(type, model, year): if type == 'car': return Car(model, year) elif type == 'truck': return Truck(model, year) class Car(Vehicle): def __init__(self, model, year): super().__init__('car', model, year) class Truck(Vehicle): def __init__(self, model, year): super().__init__('truck', model, year) # create a car using the factory car = VehicleFactory.create('car', 'Honda Civic', 2021) # create a truck using the factory truck = VehicleFactory.create('truck', 'Ford F-150', 2020) In this example, the VehicleFactory class has a create() the method that takes in the type, model, and year of the vehicle to be created. Depending on the type provided, the create() method creates and returns an instance of either the Car or Truck class, which inherits from the Vehicle class. This allows us to create different types of vehicles without specifying their exact class and without duplicating code for creating objects. In conclusion, the factory design pattern is a helpful technique in Python programming for creating objects flexibly and modularly. It can help you create a more scalable and maintainable codebase by abstracting away the details of object creation and allowing for a more flexible approach. Disclaimer: The above text is generated by the chat GPT","metadata":{"source":"https://blog.soumendrak.com/factory-design-pattern","title":"Factory Design Pattern","contentLength":725}},{"pageContent":"Python has been around since the 90s, and an enormous amount of content is there to learn Python. While this is good for any language, this creates information overload and decision paralysis in learning in a structured manner. Note: There is no official certification for Python programming Here is a list of materials to help beginners in Python programming: Interactive way Here you can try on coding on the browser itself without installing anything. learnpython.org Codecademy Books Automate the Boring Stuff with Python Learn Python The Hard Way Dive Into Python 3 Think Python The Hitchhiker's Guide to Python! A more extensive list of books can be found at awesome python books Courses Programming for Everybody Videos Programming with Mosh: 6hr long Python course Corey Schafer: Python short tutorials Intellipaat: Python long tutorials in Hindi and all freeCodeCamp: 12 beginner Python projects NeuralNine: Python beginner, intermediate and advanced playlists RealPython: Python tips and tricks sentdex: Python beginner to advanced tutorials. clearCode: Learn Python by making games For more search, awesome Youtube, visit awesome-YouTubers Tutorials Project-based learning Much more can be found at Ultimate Python Newsletters Newsletters usually published weekly keep you up to date on the latest developments in the Python world. Awesome Python Newsletter Pycoder's Weekly Python Tricks Python Weekly Podcasts If you are a podcast person, here is a list of podcasts related to Python. Python Bytes Talk Python To Me The Real Python Podcast This list will be updated from time to time whenever required.","metadata":{"source":"https://blog.soumendrak.com/learn-python-programming","title":"Learn Python Programming","contentLength":253}},{"pageContent":"Progressive Web Applications (PWA) is intended to work on any platform with a standards-compliant browser, including desktop and mobile devices. It allows the following features: Installing the app on the mobile home screen Accessing the app offline Push messaging/notifications In this article, we will learn the pros and cons of progressive web apps and the possibilities that PWAs open for businesses, including that if compared to web or mobile software. Here are some of the critical statistics and benefits of PWAs taken from a finding: +68% increase in mobile traffic 15 x faster to load and install 25X less device storage required 52% average increase in conversions Sessions are, on average increased by 78.25% Engagement is often increased by 137% The average load time for a page is 2.75 seconds Compared to mobile websites, the bounce rate is reduced by a phenomenal 42.86% On average, page views increased by a staggering 133.67%! Advantages Low Development Costs App-Like Look and Feel Fast Installation Better Performance Platform- and Device-Agnosticism No Updating Issues Seamless Offline Operation No Dependence on App Distribution Services Push Notification Functionality Enhanced Security Disadvantages Restricted Access to device features like fingerprint sensors, etc. No access to app stores Sources Adv and Disadv of PWA Benefits of PWA Further reading What makes a good Progressive Web App? Myths of PWA For more such articles, follow me on Twitter: @soumendrak_","metadata":{"source":"https://blog.soumendrak.com/pwa-progressive-web-app","title":"PWA: Progressive Web App","contentLength":237}},{"pageContent":"The Machine learning used in academics/research is quite different from the ML used in Production applications for real usage by end users. Here is a description on what are the differences. Requirements In academics, the need is to build the next SOTA (State Of The Art) model. A 0.1% gain above exiting SOTA is considered exceptional. In Production, there is no fixed requirement across all the stakeholders, the Sales team, Product team, Engineering manager, etc. have different requirements. ML Lifecycle priority In academics, GPU/TPU machines with high throughput which can train faster are required. In production low latency fast Inference/prediction is required. The users need to be shown the recommendations, the ads fast. A slight delay can reduce the clickthrough rate and thereby revenue drastically. Data In academics, mostly there is a benchmark static dataset on top of which models are built. In production, data is constantly getting generated by the users and may have bias. Working with shifting datasets make it a challenge. Bias and Fairness In academics, in front of achieving the SOTA model goal, fairness takes a low priority. In production, the fairness of the ML model can not be ignored. Interpretability In academics why the model predicts the result is often not a priority. In production, explainability is of greater priority on why the model makes this decision and the model should be more than a black box. We discussed how ML in research is different from ML in production across the following categories: Requirements Lifecycle priority Data Bias and Fairness Interpretability Reference: oreilly.com/library/view/designing-machine-.. For more such insights follow @soumnedrak_","metadata":{"source":"https://blog.soumendrak.com/ml-academics-vs-ml-production","title":"ML academics vs ML production","contentLength":273}},{"pageContent":"Book link Gangwal, with a net worth of $2.7 billion in March 2018, went on to become the richest Indian American in the USA. Keeping pilots in good humor is one of the biggest challenges for operators Discount traveler believes in being treated like a VIP and takes certain privileges like clicking photographs of women crew members as part of their package. People love discount travel when it’s quality travel. ‘We have a challenge of getting talented people in this industry. For a country of 130 crore people, one shortage we have is talent,’ IndiGo’s on-time performance record fell considerably after the DGCA changed its methodology to measure this metric while SpiceJet emerged as the leader on this count. the airline had to replace P&W engines on its 32 A320neo aircraft at least 69 times between May 2016 and November 2017. The problem, according to P&W, was due to a ‘knife edge seal issue. When a man with a much bigger profile and experience was appointed as his junior, Ghosh was intelligent enough to get the message. The key to IndiGo’s sustainability centers on three basic airline business fundamentals: Air transport will and would continue to be defined by itself as the most efficient mode of transport Break even in the airline business and especially for low-cost airlines takes between three to five years, so you need to stay focused on the business, and most importantly Always listen to what the traveler wants from a service and give that to them. The biggest challenges for IndiGo as with any airline are three; the first being the cost of jet fuel and oil prices, the second being competition, and the third is credibility and reputation. All it takes is one air crash to wipe out five years of the reputation built to one’s credit. I would like to believe that there will be a return of the Tatas in full-blown aviation and there will be a time when Air India will get exemplary leadership, government decisions, and strategic focus. So till then, I don’t see anyone except IndiGo being the most formidable transportation disrupter in the region. Eleven Life and Business Lessons from IndiGo Dare to dream—and dream big. One can succeed and succeed big an ethical way. A partnership can work if it is a partnership of shared vision and shared values—not if it is just a partnership of convenience and connivance. Ultimately, a business has to be run on sound business principles to succeed. PR and gimmickry are no substitutes for real performance. Despite a great idea and market potential, a start-up must do its homework meticulously. Think ahead to remain ahead of the competition! Think like a chess grandmaster—a grandmaster visualizes at least ten forward moves. The current world champion Magnus Carlsen can think up to twenty forward moves. Be the game changer if you can be. Strike like a panther when opportunity strikes. Empowerment of people is key—one can’t be everyone and everything. Providence plays its own role, but don’t center your business strategy around it.","metadata":{"source":"https://blog.soumendrak.com/highlights-the-indigo-story","title":"Book Highlights: The Indigo story","contentLength":527}},{"pageContent":"Book Link Always take the challenging path. You will end up a winner. Being a winner is about what happens in your head. My journey may not have been successful but then failure has always been the best teacher! It taught me a lot and I came back stronger. Always remember, if you decide to allow your frustrations to rule, the next day will be even tougher. Seven times out of ten, cricketing successes are born out of visualizing positively. Eight times out of ten, failures happen because of surrendering mentally. A negative mindset will only bring in negative results. While most people are paralysed by the thought of failure, champions think of pressure as an opportunity to climb further up the ladder. You can’t afford to carry the past and worry about the future. Remember, in life small successes open up the door for bigger ones.’ If you say you are turning your back at a challenge because you fear the pressure, then you are wasting an opportunity to get better.’ It taught me that opinion about a new player changes in the team once he performs. But you can’t expect them to respect you the very first day you walk into the dressing room. When you are down and times are tough, the best solution is to work hard and keep quiet. Only your actions and nothing else can change your destiny. You just have to fly so high that your competition is left far behind. This is the only solution to your problem.’ Life has taught me that the best things in life happen in an unplanned fashion. Heroes are made when you confront an uncomfortable situation head-on. Have you ever heard of a hero who sits at home, goes to office in the late afternoon after having slept for ten hours and finally ends the day with an evening film show? was very clear in my mind that I would only play to win. And while attempting to win, if I lost I didn’t mind. in life safer options will never make you a hero. You have to be prepared to lose everything that you have gained. To conquer and create history you have to be always prepared to go beyond the beyond. You might stretch yourself to your absolute limits. You may feel terribly exhausted. Onlookers may declare that you have lost. But if you feel the hunger strongly within, don’t ever stop. Go for it. As they say, keep the fire burning! It confirmed to me my instincts that however difficult a challenge was, you should always aspire to aim high. So much love and affection made me weak. Quitters never win and you know you have ability on your side. Never ever think that by agreeing to a difficult demand you are belittling yourself. You should look at it, instead, as an opportunity to climb back to the top. Opportunities are not couriered across to you every day. visualization process that prepare a batsman for the real thing. You have to be in the zone that convinced the mind that you were battling session after session and in the process getting a big hundred. Keep visualizing your success. might break a bone. I might get killed. But I was not going to take a backward step. I was going to give it everything I had. Even when things are not working for you, don’t quit. Just hang in there. Darkness also has an expiry date. But if there’s anything you should take away from this book, it is that you should not give up. Be patient. You have to wait for your turn, and when it comes, you must remain prepared. There is no point dwelling on people who are not worthy of your attention. If you do not get criticized in your profession it will mean that your profession is not important enough. pressure is like a wild horse. Difficult to tame but once you manage to do it the skill set remains with you.","metadata":{"source":"https://blog.soumendrak.com/book-highlights-a-century-is-not-enough","title":"Book Highlights: A Century Is Not Enough","contentLength":680}},{"pageContent":"I was approached by one of Byju's recruiters on Linkedin. I have put my status as actively looking for a job, which was visible only to the recruiters who have taken recruiter premium subscription. Years of experience at the time of applying: 9 Total number of rounds: 4 Outcome: could not clear 🙂 Let's go through the details. First round The first round was by an Engineering manager. It was a screening round, which involved a generic discussion about my experiences on the following topics: OAuth 2.0 OIDC GoLang use cases Cloud experience ML and Elasticsearch experience Design patterns in Python SOLID principles Docker and Kubernetes basic Project-specific tech stack decisions like: Why a particular tech stack has been used Major challenges in my current role How do you handle conflict between your reporters How do you define tasks and prioritize Second round It was on DSA by Backend Principal Engineer. Question Given an array of lengths n.Find the maximum sum of k elements by traversing only via the start and end of the array (k corner elements).For e.g. array = [1,5,6,78,9,0,9,99,8] and k=4Ans: 8+99+9+1 Improvements needed on: Recognizing problem patterns and Time and Space complexity calculation Third round By a Software Architect. System API designing and Data modeling round. I was asked to design a BookMyShow kind of system with the following requirements: Functional requirements: User login, logout -> user session Catalog of options a. Theatres b. Concerts c. Sports Search functionality on the catalog a. Events b. Ticket availability Payment system a. 3rd party payment integration Ticket download Notification of confirmation Non-functional requirements: Large scale system -> Multiple cities Highly available -> Ticket availability Ticket booking -> Highly consistent Improvements needed on: Data Modeling and Designing faster Fourth round By a Senior VP. Same round as third. In this round was asked to design a rate limiter. Improvements needed on: Data Modeling and System Designing Outcome of the interviews Not selected Review ByJu's interviewers were on time In case one interviewer was unavailable substitutions were arranged. I got to know my improvement areas and doubled down my efforts on those. I have appeared in 20+ interviews so far. You can check out my job interview series for the rest of the interview experiences. Let me know if you have any further questions. Thank You.","metadata":{"source":"https://blog.soumendrak.com/interview-experience-in-byjus","title":"Interview experience in Byjus","contentLength":401}},{"pageContent":"This is a blog on different 360-degree view providers for Bhubaneswar, Odisha, India. Google Street View On 27th July 2022 Google brought back street view to India, due to a reduction in Govt. security regulations. From Wikipedia: Google Street View is a technology featured in Google Maps and Google Earth that provides interactive panoramas from positions along many streets in the world. It was launched in 2007 in several cities in the United States, and has since expanded to include cities and rural areas worldwide. Streets with Street View imagery available are shown as blue lines on Google Maps. Google Street View displays interactively panoramas of stitched VR photographs. Most photography is done by car, but some is done by tricycle, camel, boat, snowmobile, underwater apparatus, and on foot. Here is the coverage of Google Street View in Bhubaneswar. The tiny blue dots as pointed by the red arrow denote the 360-degree views of a place on the map. By clicking on any of the dots you can see a 360-degree view of a place. For example here is a 360-degree picture of Maharaja Cinema Hall. Thanks Surya Shankar Meher for the Image. You can contribute 360-degree street view images to google maps by the Street View App. https://play.google.com/store/apps/details?id=com.google.android.street&hl=en_IN&gl=US MapMyIndia MapMyIndia is another 360-degree view provider which has the following coverage: It has covered the Chennai-Kolkata national highway and Cuttack-Puri old highway passing through the city of Bhubaneswar. Mapillary Mapillary is another crowdsourced site that covers 360-degree views of places. For more such insights follow me on Twitter: https://twitter.com/soumendrak_","metadata":{"source":"https://blog.soumendrak.com/street-views-in-bhubaneswar","title":"Street Views in Bhubaneswar","contentLength":286}},{"pageContent":"I have been using a MacBook pro since the end of 2019. These are the different apps I use which are super productive for me: Krisp Krisp’s AI-powered solution removes background noise and echoes from meetings, leaving only a human voice. Every day you get 60 minutes of free noise cancellation from your microphone and speaker. It really does noise cancellation well, very well. RayCast RayCast is your Mac's personal assistant. It is a spotlight on steroids. Earlier I was using Alfred. However, the RayCast personal free version provides many more features than the free version of Alfred. Shottr The feature-rich, fast, and free best screenshot tool ever. It can annotate, pixelate, measure pixel distance scroll screenshots, and many more. You won't regret installing it. Thunderbird I use Thunderbird as my all-in-one email client. Other notable Apps: OBS for Video shooting and live streaming Notion for note taking Google Earth Pro for Maps and Time Travel ALDente for Battery life optimization Zoom for calls Canva for poster design Figma for UX design OpenLens for Kubernetes pods management PyCharm Pro for professional Python projects Webstorm for UI development What other Mac OS App do you use which is helpful to you? You can follow me on Twitter @soumendrak_","metadata":{"source":"https://blog.soumendrak.com/productive-mac-apps","title":"Productive Mac Apps","contentLength":214}},{"pageContent":"There are many ways to get how much time a function takes in Python. Here is an easy decorator implementation to check how much time a function takes. from functools import wraps import time def timeit(func): @wraps(func) def timeit_wrapper(*args, **kwargs): start_time = time.perf_counter() result = func(*args, **kwargs) end_time = time.perf_counter() total_time = end_time - start_time print(f'Function {func.__name__}{args} {kwargs} took {total_time:.4f} seconds') return result return timeit_wrapper @timeit def my_func(): # do stuff This decorator can be used by decorating a function to get the time spent. What if you want to aggregate this timing data in a timeframe, like how many times this function has been called, and what the maximum time is taken, for that, we need to use a library called codetiming. Here is a sample use case: # pip install codetiming # pip install humanfriendly # pip install loguru from codetiming import Timer from humanfriendly import format_timespan from loguru import logger @Timer(name=\"my_func\", text=lambda secs: f\"my_func elapsed time: {format_timespan(secs)}\") def my_func(): ... def get_aggregated_timings(cls): timed_function = \"my_func\" logger.info( f\"\\n{timed_function} count: {Timer.timers.count(timed_function)}\\n\" f\"total: {Timer.timers.total(timed_function)}\\n\" f\"max: {Timer.timers.max(timed_function)}\\n\" f\"min: {Timer.timers.min(timed_function)}\\n\" f\"mean: {Timer.timers.mean(timed_function)}\\n\" f\"standard deviation: {Timer.timers.stdev(timed_function)}\\n\" f\"median: {Timer.timers.median(timed_function)}\\n\" ) Timer.timers.clear() # clears all the timer data This will find the aggregated time spent by my_func. Let's go through what each one of them will log: count: Number of times the function has been called. total: Sum of all the seconds elapsed in the function max: Maximum time spent on a single flow min: Minimum time spent on a single flow mean: The average of all the time spent on that function median: The median of all elapsed time stdev: The standard deviation of all elapsed time At the end Timer.timers.clear() clears the data stored In memory and starts from fresh for the next iteration. Do you want to use an in-memory LRU cache with a timeout, you may check out this article: https://blog.soumendrak.com/cache-heavy-computation-functions-with-a-timeout-value I post on Python programming on my Twitter handle, you can follow me @soumendrak_. My website","metadata":{"source":"https://blog.soumendrak.com/aggregate-code-timing-in-python","title":"Aggregate Code timing in Python","contentLength":384}},{"pageContent":"This is a growing collection of blogs by software companies that you can read to get Engineering practices and Software Architecture ideas. Airbnb Altassian Asana BitTorrent Canva Cloudera CLoudflare Cred Docker Dropbox Dunzo eBay GitHub Groupon Hackerearth Instagram Intercom LinkedIn Lyft Meta MixPanel Netflix Nextdoor Paypal Practo Quora Reddit Salesforce Shopify Slack Soundcloud Spotify Stripe Swiggy Thumbstack Tumblr Twitter Uber Yelp Zerodha Zomato Zoom You can download this Bookmarks file and import it into your browser.","metadata":{"source":"https://blog.soumendrak.com/top-software-engineering-blogs","title":"Top Software Engineering Blogs","contentLength":76}},{"pageContent":"I have been trying out software since 2008. Back then software was coming in CDs in tech magazines. After all these years, here is what I have been settling on: Browser I had tried IE, Edge, Safari, Opera, Maxthon, Avant, Vivaldi, etc. I had been a Google Chrome user for a long time. A few years back when Firefox launched Containers, I switched to Firefox. Mozilla Firefox Developer Edition I use Firefox, especially for its container feature. I am a contributor to the Mozilla community, so a bit of emotional attachment is there. Brave Brave I use to use Google Input tools add-on to write into Odia Wikipedia and to make Shabdarasa posts in Odia. To try out new Chromium-based Add-ons. Browser Extensions/Add-ons Firefox Video Speed controller I use this to go beyond 2x speed while watching any video. Highest went till 4x speed. Containers Containers are like Independent cookies-based tabs synced with your bookmarks. Firefox Multi-Account Containers lets you keep parts of your online life separated into color-coded tabs. Cookies are separated by the container. For example, In two different tabs in the same window, you can open two different Twitter accounts. Grammarly Spelling/Grammar corrector Thumbnail rating bar Without opening the youtube videos, from the thumbnail of the video you can see how many people liked/disliked the video. Dark reader It converts any webpage to dark mode. It helps to read on the bed before sleeping without too much straining the eyes. uBlock origin Finally settled with this AdBlocker. It supports customized Ad blocking as well. WhatFont This Add-on helps me identify any text font. Wapanalyzer Helps me detect what web framework, tools, and technologies are used in a website. ColourPicker Provides the hex code of any color on a website. Imagus To quickly preview a photo in full size, without clicking on the image. SearchPreview Adds preview of the websites on the search results. SaveToNotion It saves any important website to my notion (a note-taking app) workspace. AutoTabDiscard It automatically makes tabs inactive if Idle for a custom time period. JiffyReader It has a feature, which helps you read faster. I have been experimenting with this Add-on and have not settled yet. I would love to know any other add-on which is super useful to you and I should try that out. To get more such updates you can follow me on Twitter @soumendrak_.","metadata":{"source":"https://blog.soumendrak.com/my-top-browser-extensions-add-ons","title":"My top browser extensions / add-ons","contentLength":410}},{"pageContent":"ଧେତ୍ ବସଟି ଧୁଡ଼ଧାଡ଼ ହୋଇ କଚି ହେଲାନି ଯେ, କେତେ ସପ୍ନ ସବୁ ହଠାତ ଉଭାନ ହେଇଗଲା । ଇଲେକ୍ଟ୍ରୋନିକ ସିଟିରୁ ରୁପେନ୍ଆଗ୍ରାହାରାର ଫ୍ଲାଇ ଓଭର ରାସ୍ତାରେ ହାରାହାରି ଅଶୀ କିଲୋମିଟର ପ୍ରତି ଘଣ୍ଟା ବେଗରେ ଗାଡ଼ି ଚାଲେ । ସେଥି ସହିତ ଚାଲେ ସୁଲୁସୁଲିଆ ପବନ, ଆପଣ ବସରେ ସାମ୍ନାରେ ବସିଥାନ୍ତୁ ବା କୋଣରେ ଛିଡ଼ା ହୋଇଥାନ୍ତୁ ନା କାହିଁକି, ଥରେ ବସ ତାହାର ବେଗ ବଢ଼ାଇଦେଲେ ସେ ପବନ ଆପଣଙ୍କର ଶରୀର ପାଖଦେଇ ନିଶ୍ଚୟ ଯିବ । ତେର କିଲୋମିଟର ଏହି ରାସ୍ତା ପ୍ରାୟ ଦଶରୁ ପନ୍ଦର ମିନିଟି ଭିତରେ ଅତିକ୍ରମ ହୋଇଯାଏ । ସଫ୍ଟୱେର କମ୍ପାନୀ ଗୁଡିକରେ ଦିନରାତି କାମ କରି ଥକିଯାଇଥିବା ମନ, ଯେ ନିଜ ଭିଟାମାଟି ଛାଡ଼ି ଏଠି ପରିବାର ପ୍ରତିପୋଷଣ କରିବାକୁ ଚାଲିଆସିଛି ତାକୁ ସତେ ଯେପରି ଏହି ଶୀତଳ ସୁଲୁସୁଲିଆ ପବନ ନିଜ ବୋଉ କୋଳର ନାନାଵାୟା ଗୀତ ଭଳି ଲାଗେ । ସେହି ଅନବରତ ସଂଘର୍ଷରତ ପ୍ରାଣଟି ଟିକେ ନଶୋଇକି ରହିବ କେମିତି? ଯେଉଁଠାରେ ଫ୍ଲାଇ ଓଭର ତଳ ରାସ୍ତା ଭୂମିକୁ ସ୍ପର୍ଶ କରିଛି, ସେଠାରେ ବର୍ଷାଜଳ ନିଷ୍କାସନ ହେବାକୁ ଲୁହାର ଜାଲି ଦିଆଯାଇଛି । ସେହି ଜାଲି ଉପରଦେଇ ବସର ଚକା ପାର ହେଲାବେଳେ ଏହି ଧୁଡ଼ ଧାଡ଼ ଶବ୍ଦ ହୋଇଥାଏ । ଯେପରି ସକାଳ ନହଉଣୁ ଅଜାନର ସ୍ୱରରେ ରାତିର ମିଠା ମିଠା ସ୍ଵପ୍ନ ଭାଙ୍ଗିଯାଏ, ଠିକ ସେହିପରି ଏହି ଲୁହା ଜାଲିଟି କେତେ ଆଶାକାଂକ୍ଷୀ ହୃଦୟରୁ ସ୍ଵପ୍ନକୁ ନିର୍ବାସିତ କରି ନିଷ୍ଠୁର ବାସ୍ତବ ଦୁନିଆରେ କଚାଡ଼ି ଦିଏ । Let me know what you think at any of the following places: 🔗 LinkedIn: linkedin.com/in/soumendrak 📝 Medium: medium.com/@soumendrak 📖 Blog: blog.soumendrak.com 🐥 Twitter: twitter.com/soumendrak_ 🧑🏻‍💻 Github: github.com/soumendrak 📹 Youtube: youtube.com/@openodia","metadata":{"source":"https://blog.soumendrak.com/luhaajaali","title":"ଲୁହା ଜାଲି - ଏକ ବାସ୍ତବତା","contentLength":37}},{"pageContent":"ଅଫିସରେ ଇମେଲର କ୍ୟାଲେଣ୍ଡରଟି ଦେଖିଲାବେଳେ ତାରିଖଟି ଚିହ୍ନା ଚିହ୍ନା ଆପଣାର ଭଳି ଲାଗିଲା । କିଛି ମୁହୂର୍ତ୍ତରେ ଜଣାବି ପଡ଼ିଗଲା, କାହିଁ କେତେ କଣ ସ୍ମୃତି ଜଡ଼ିତ ଏହି ତାରିଖ ସହ । ଏହା ଭିତରେ ଚାହୁଁ ଚାହୁଁ ବର୍ଷଟିଏ ପୁଣି ବିତିଯାଇଛି । ଜଣାହିଁ ପଡ଼ିଲାନାହିଁ । ପୁଣି ଦୀର୍ଘ ତିନି ଶହ ପଞ୍ଚଷଠି ଦିନପରେ ଆସିଛି ଏହି ଦିନ । କିଛି ବର୍ଷ ପୂର୍ବେ କେତେ ଆଶା-ଆକାଂକ୍ଷା, ଯୋଜନା, ମାସ ମାସ ଆଗରୁ ପ୍ରସ୍ତୁତି ଚାଲୁଥିଲା କେବଳ ଏହି ତାରିଖଟିକୁ ସ୍ମୃତିମୟ କରିବାକୁ । ଆଉ ଏବେ ଭାବିବାକୁ ପଡୁଛି କଣ ଥିଲା ଏହିଦିନ, କର୍ପୁର ଉଡ଼ିଯାଇଛି ଖାଲି ରହିଯାଇଛି କିଛି ମହକ । ସତରେ ସେ ଠିକ କୁହାଯାଇଛି ଜଣେ ମନୁଷ୍ୟ ଯେଉଁ ବ୍ୟକ୍ତିମାନଙ୍କ ସହ ଅଧିକ ସମୟ ବିତାଏ ଧୀରେ ଧୀରେ ସେମାନଙ୍କର ଭଳି ହୋଇଯାଏ । କେତେ ବଦଳିଯାଇଛି ମୁଁ ! ହେଲେ କ'ଣ ହେବେ ଗଲା କିଛିବର୍ଷଗୁଡ଼ିକଭଳି ପୁଣି ଘରକୁ ଯାଇ ଆରାମରେ ଖାଇପିଇ ଏକ ସାଧାରଣ ଦିନ ଭଳି ଶୋଇପଡ଼ିବି । ତେବେ କଣ ମହତ୍ତ୍ୱ ଏହି ତାରିଖର? Let me know what you think at any of the following places: 🔗 LinkedIn: linkedin.com/in/soumendrak 📝 Medium: medium.com/@soumendrak 📖 Blog: blog.soumendrak.com 🐥 Twitter: twitter.com/soumendrak_ 🧑🏻‍💻 Github: github.com/soumendrak 📹 Youtube: youtube.com/@openodia","metadata":{"source":"https://blog.soumendrak.com/date","title":"ତାରିଖ - ଏକ ସ୍ମୃତିବିହୀନ ସ୍ମୃତି","contentLength":37}},{"pageContent":"Test scenario I have taken the Two sum problem from Leetcode. The problem statement: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6 Output: [1,2] Example 3: Input: nums = [3,3], target = 6 Output: [0,1] Constraints: 2 <= nums.length <= 104 -109 <= nums[i] <= 109 -109 <= target <= 109 Only one valid answer exists. Implementation I have used a hash map to solve this problem across all three languages. Python class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]: hash_table = {} for i, num in enumerate(nums): target_num = target - num if num in hash_table: return i, hash_table[num] else: hash_table[target_num] = i return None Python stats Run time: 40ms Memory usage: 14.5 MB Golang func twoSum(nums []int, target int) []int { hashMap := make(map[int] int) for i := 0; i < len(nums); i++{ if _, found := hashMap[nums[i]]; found { ans := []int{i, hashMap[nums[i]]} return ans } else { hashMap[target- nums[i]]= i } } return nil } Golang stats Run time: 4ms Memory usage: 4.3 MB Rust use std::collections::HashMap; impl Solution { pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> { let mut hash_table: HashMap<i32, i32> = HashMap::new(); for i in 0..nums.len() { // println!(\"Processing number: {}\", nums[i]); match hash_table.get(&nums[i]){ Some(&x) => return vec![x, i as i32], None => hash_table.insert(target - nums[i], i as i32), }; }; return vec![-1, -1] } } Rust stats Run time: 2ms Memory usage: 2.2 MB Conclusion As per the results, Rust took the least memory and was the fastest of all three. For more such insights follow me on Twitter.","metadata":{"source":"https://blog.soumendrak.com/python-vs-golang-vs-rust","title":"Python vs Golang vs Rust","contentLength":341}},{"pageContent":"👨🏻‍🏫 -> Earlier people used to use a sundial to calculate the time of the day. Photo by Timo C. Dinger on Unsplash The Clock (analog) we have now is made in the clockwise direction to mimic the shadow movement of the sun on a sundial. 🧑🏻‍🦱 -> But the sun's shadow moves in the counterclockwise direction in the southern hemisphere. Then why the northern hemisphere? 👨🏻‍🏫 -> Excellent question. As the earth rotates on a 21.2-degree axis, in the Southern hemisphere the sun's shadow moves in the anti-clockwise direction, but the reverse in the northern hemisphere. Now why the Northern hemisphere is the cause of Population density. The population density is more in the northern hemisphere than in the southern hemisphere. Therefore, the Clockwise direction. Sundial shadow movement in the anti-clockwise direction in the Southern Hemisphere: https://www.youtube.com/watch?v=zWueOSLpbbw Sundial shadow movement in the clockwise direction in the Northern Hemisphere: https://www.youtube.com/watch?v=_MFM8PFio6k Therefore, a clock rotates clockwise to match the shadow of the sun's movement in the densely populated northern hemisphere. Please follow me on Twitter for more such insights.","metadata":{"source":"https://blog.soumendrak.com/why-does-a-clock-rotate-in-the-clockwise-direction","title":"🧑🏻‍🦱 -> Why does a clock rotate in the clockwise direction?","contentLength":191}},{"pageContent":"Most ML algorithms can only take low-dimensional numerical data as inputs. Why? → Faster for computation. That means we must transform non-numeric variables (ex. items and users) into numbers and vectors. We could try to represent items by numerical values as it is, however, neural networks treat numerical inputs as continuous variables. That means higher numbers have greater significance than lower numbers. It also sees numbers that are similar as being similar items. This makes perfect sense for a field like “age” but is nonsensical when the numbers represent a categorical variable. One-hot encoding works in turning a category into a set of continuous variables, but we literally end up with a huge vector of 0s with a single or a handful of 1’s (Sparse Vectors), creates an unmanageable number of dimensions. Since each item is technically equidistant in vector space, it omits context around similarity. As a result, we have no way of evaluating the relationship between the two entities. We could generate more one-to-one mappings, or attempt to group them and look for similarities. This requires extensive work and manual labeling that’s typically infeasible. Embeddings are dense (no/fewer 0s) numerical representations of real-world objects and relationships, expressed as a vector. The vector space quantifies the semantic similarity between categories. Embedding vectors that are close to each other are considered similar. Sometimes, they are used directly for the “Similar items to this” section in an e-commerce store. Other times, embeddings are passed to other models. In those cases, the model can share learnings across similar items rather than treating them as two completely unique categories, as is the case with one-hot encodings. For this reason, embeddings can be used to accurately represent sparse data like clickstreams, text, and e-commerce purchases as features to downstream models. On the other hand, embeddings are much more expensive to compute than one-hot encodings and are far less interpretable. References Definitive guide to Embeddings You can contact me over LinkedIn or Twitter.","metadata":{"source":"https://blog.soumendrak.com/why-do-we-need-vector-embeddings-in-nlp","title":"Why do we need vector embeddings in NLP?","contentLength":340}},{"pageContent":"You have joined as a junior developer, coded for 8-15 solid years. Now is the time to choose between two paths: a) Engineering Manager b) Software Architect. This post is about all skills needed to be a software architect. Let's start. 1. Ask the right kind of questions Why is this and not that? What is the expertise of the team? What are the trade-offs? Is it the best way to do or is it purely a habit? You are not supposed to be told what needs to be done; you are paid to figure out what needs to be done Listen to the answers provided to the questions 2. Good communication skills The ability to bring people to your discussions, interact with them, making your point without knowing them before. Talking to a computer is easier than talking to people. 3. Adaptability Have an eye on the new market innovations Modify your trade-offs based on the changing business goals Also be open-minded to better suggestions 4. Prioritization skills Prioritise your and others' tasks Time management is an essential and evergreen skill 5. Technology skills Ability to learn new technology 6. Be aware of switching roles If you are good at communication, management may ask you to move into a managerial role and another way around. Fight for what you love ❤️ 7. Scaling Share your skills and experiences with other people The more you share the more you grow. 8. Pair programming By Pair programming, not always two developers, but a BA and a QA Mob programming, generally used to solve production issues and deployment 9. Community Getting involved with software that has a strong community like Kafka, MongoDB, Elasticsearch, etc. By giving back to society with the products you developed 10. Internal Learning Sessions Discussion about a new technology or programming language. One presents but everybody participates. Best day to do it is on Monday. 11. Book club A book has been assigned and all pick one chapter and a week later all need to present 5 mins on each chapter in the Internal learning sessions. 12. Conferences Attending conference is good; speaking at conferences is better for a career. Summarising Technical skills are a bonus. Communication skills Scaling skills by sharing Sharing makes you look good for a career References Career advice for architects - Trisha Gee (JetBrains) Thanks for reading this far. If you are new to those blogs, welcome, and hi I am Soumendra. You can reach out to me on Twitter or LinkedIn.","metadata":{"source":"https://blog.soumendrak.com/better-software-architect","title":"10 tips to become a better Software Architect","contentLength":422}},{"pageContent":"Introduction With the help of GAN (Generative Adversarial Network), it has been possible to train the model with existing photos and generate non-existing random individuals. It is becoming difficult to identify which images are real and which are fake. Even there can be images of people who actually do not exist at all. The cover photo I have used is an AI-generated fake photo. These photographs can be used on social media platforms to misidentify, harass, etc. In this blog post, I have mentioned a few tricks to detect a fake AI-generated image with your bare eyes. Tricks Disclaimer: These tricks are not 100% guaranteed that these are fake images. But, should be enough to bring in a sense of intuition and make you alert. You need to do your own due diligence. With more advanced AI, I have no doubt that these tricks will be obsolete. 1. Eye Alignment Check if the face and eyes are center-aligned on the image. Even if somebody will crop the photo, check for the eye alignment always parallel to the ground. Even if someone will rotate the image, you can easily find it. 2. Ear or Earring Check if one of the earrings is missing. Check the ear is missing fully. Now the GAN models forget these things, but sure they will improve. 3. Hairs Check if hairs are abruptly on air. You can see this picture to get an idea. 4. Background Vague background, which does not represent any actual place or any place at all. Actual people click photos in a realistic background. 5. Irregular pupil size This one is a bit difficult to check. To know this you need to zoom in till you get to see the eye pupil clearly. The left one is a real child, the right girl is a fake one. Bonus Tricks Check if eye colors are mismatched. The face is deformed or another nearby person's face is deformed. Check for eyelid hairs, if they do not look right. References StyleGAN2 - Official TensorFlow Implementation source code Analyzing and Improving the Image Quality of StyleGAN paper That smiling LinkedIn profile face might be a computer-generated fake Images credit: thispersondoesnotexist.com Eyes Tell All: Irregular Pupil Shapes Reveal GAN-generated Faces Hope you learned something new today and stay alert on social media. As technology is a two-faced sword, with the advancement of technology, we need to be vigilant. If this is the first time you are reading my article, then welcome here, I am Soumendra you can know more about me in the About me section. You can connect with me on Twitter or LinkedIn. Thank you. Inspiration for this blog: https://twitter.com/soumendrak_/status/1508422664699842565?s=20&t=Zw94nEpRAQ3URHt24C_ftw","metadata":{"source":"https://blog.soumendrak.com/fake-dp","title":"Fake DP","contentLength":462}},{"pageContent":"This is a part of my job interviews series. Background Year: September 2018 Campus: JPMC Office, ORR, Bengaluru Position: Senior Python developer Company: JPMC India On the ORR (outer ring road), JPMC has a big office. It took me some time to reach the designated building. I used to stay at BTM during that time. First round of discussion Before the physical discussion, I had a telephonic round. It was delayed by 1 hour due to some availability issues. Entity extraction how you did in {a client} and what were the main challenges involved. Date extraction on different date formats was a challenge. I had used multiple libraries plus my own self made rule-based logic to finally make it work. classmethod vs staticmethod; where and how did you implement it? You may checkout this StackOverflow answer. input: [1,2,3,4,5,6] and output: [[1,2], [3,4], [5,6]] how can you get the output with the help of a list expression?>>> input_list = [1,2,3,4,5,6] >>> output_list = [input_list[index:index+2] for index in range(0, len(input_list), 2)] >>> print(output_list) [[1, 2], [3, 4], [5, 6]] Different types of Object-oriented programming components in Python: Inheritance Polymorphism Abstraction & Encapsulation You may check this GeekForGeeks page for more clarity. What are Decorators and why do you use them? This StackOverflow answer is one of the best out there on decorators. At that time, I had used the timing decorator to get the execution time of a function/method. For a complex case where I had used lru_cache with a timeout limit, check out this article. What is a Context manager? When to use Decorator and Context manager? This is one of the best answers out there by Martijn Pieters They are completely separate concepts and should not be seen in the same light. A decorator lets you augment or replace a function or a class when it is defined. This is far broader than just executing things before or after a function call. Sure, your specific decorator lets you do something just before and after a function call, provided no exception is raised, or you explicitly handle exceptions. But you could also use a decorator to add an attribute to the function object or to update some kind of registry. Or to return something entirely different and ignore the original function. Or to produce a wrapper that manipulates the arguments passed in, or the return value of the original function. A context manager can't do any of those things. A context manager on the other hand lets you abstract away try: ... finally: constructs, in that no matter how the block exits, you get to execute some more code at the end of the block. Even if the block raises an exception, or uses return to exit a function, the context manager __exit__ method is still going to be called, regardless. A context manager can even suppress any exceptions raised in the block. The two concepts are otherwise not related at all. Use decorators when you require to do something to or with functions or classes when they are defined. Use context managers when you want to clean up or take other actions after a block ends. Second round of discussion This was a physical interview. Three, Four people came and started interviewing me. Initially felt a bit nervous about watching so many people. Usually 1 or 2 interviewers I used to face. Anyway, I adapted to the situation calmed myself as needed. Balanced bracket This problem is the same as this Leetcode problem called Valid Parentheses Write a program (pseudocode) to find out the number of vowels in a string same as this problem with solution Find out the minimum number in a function without using any compare or max/min operator Check this out Inside a dictionary, a list is there as a value if I delete the original list, will it affect the dictionary No, the dictionary uses a hash table and keeps its own copy. Therefore, by deleting the original list will not change the value in the dictionary. What is GIL and How GIL impacts multi-threading in Python? Check this article for details. How is multi-threading separate from multi-processing? Check this out. Run time and compile-time polymorphism; which one is there in Python; give one example of Polymorphism I was unable to answer this. But, you can. Check this out. Method overloading and overriding in Polymorphism source: GeekForGeeks Shallow copying with example There are two types of copy, Shallow and Deepcopy. For more check out this RealPython article: Making a shallow copy of an object won’t clone child objects. Therefore, the copy is not fully independent of the original. A deep copy of an object will recursively clone child objects. The clone is fully independent of the original, but creating a deep copy is slower. You can copy arbitrary objects (including custom classes) with the copy module. Design Patterns used in Python This is a very good website for Design patterns in Python. Convert a string to a list without a list() or list expression I could not recall at that time. You can check this article on 7 Powerful ways to Convert string to list in Python. Result Not selected for next round. I have been escorted back to the ground floor by one of the interviewers. Opinion I should have done more programming practice. My pseudocode was not up to the mark. 4 interviewers were a bit heavy 😀 Got to know where was I lacked the skills. When I was in COBOL/Mainframe technology during the initial phase of my career, JPMC was one of my dream companies to work on. Anyway, not with Python anymore. I started preparing hard for my next interviews. I have appeared in 20+ interviews so far. You can check out my job interview series for the rest of the interviews experiences. Let me know if you have any further questions. Thank You. Cover pic by Ravi Shankar","metadata":{"source":"https://blog.soumendrak.com/jpmc-interview-experience","title":"JP Morgan & Chase interview questions and answers","contentLength":1011}},{"pageContent":"Please check out the game here: www.ଶବ୍ଦରସ.com or https://sabdarasa.com 🤫 Approach (ଆଭିମୁଖ୍ୟ) On 12th Jan 2021, I have been approached by Dr. Aviseka Acharya to build the game Wordle in Odia language for the Odia people. The goal is to engage people to increase their vocabulary and appreciate the richness of the language. I did not have any clue of the game Wordle, other than watching people post green-yellow boxes on their Twitter handles. Even Dr. Aviseka did not have a clue if it can be done in Odia. Dr. Aviseka and I met once over an Odias In ML Twitter space. Later when I asked him what inspired him to reach out to me with this requirement. His exact response: The way English language injecting into our kids life is becoming a threat to our own language. We all know how crucial a language is for state / nation The only way we can claim back and prosperous is with innovation , smart , easy approach with our language so the game is one of them. I followed your work and saw your passion for the Odia language so I thought you may guide me. I heard your speech in my space there I discovered your potency as well . 🧐 Initial analysis (ପ୍ରାରମ୍ଭିକ ବିଶ୍ଳେଷଣ) This is the most critical part of a project. This phase makes or breaks the project. The first thing a senior programmer does is, learn the problem and get the requirements. If you would have asked me 8-10 years before, the first thing I could have done is panic on getting these high-level out-of-the-blue requirements, then tried to write from scratch. Do not be that guy. I played the game multiple times (through Incognito Window) and got an idea of the algorithm behind it. Mind mapping the algorithms for Odia language and getting the low-level requirements. 🤨 Requirements gathering After playing the game and keeping the end goal in mind, I have gathered the following requirements: A specific length of words data/corpus required Need to compare multiple words: position and letter Letter with Matra(diacritics) and Juktakhyara(combination of multiple letters) is a challenge to compare, but let's figure it out later. The sharing part should not reveal the words and their positions, but their color as done in the original game. See: Zero-knowledge proof. A keyboard to input Odia letters Rest all requirements are to mimic the features, that the original game has. Those will be Add-on. 🕵🏻‍♀️ Haunting for existing solutions (ବିଦ୍ୟମାନ ସମାଧାନ ଖୋଜା) Do not reinvent the wheel. Where is the best way to search for code. For code, snippets search StackOverflow, but for actual working integrated code, search GitHub. From there I zeroed down on the following repos: NameUsabilityURL to playGitHubLanguageNotes Italian Wordlepietroppeter.github.io/wordle-itgithub.com/pietroppeter/wordle-itJavascriptComplicated JS codebut all in a single file. Do not know where he hosted it\" Word length customizablefoldr.moe/hello-wordlgithub.com/lynn/hello-wordlTypescriptNot exactly clone Tailwind WordleMediumwordle.hannahmariepark.comgithub.com/hannahcode/wordle\"ReactJSTailwindCSSThe best code however I do not know how to support Odia keyboard here\" Another cloneguessle.herokuapp.comgithub.com/jakerella/guessleJavascriptCustomizable Tamil WordleHighesttecoholic.github.io/tamil-wordlegithub.com/tecoholic/tamil-wordle\"GoReactJS\"hope it will work Bulgarian wordlewordle-bg.ggerganov.comgithub.com/ggerganov/wordle-bgC++Another language keyboard Thai WordleHighthwordle.vercel.appgithub.com/narze/thwordleViteClosely monitor Motleuk23xf.deta.devSmooth deployment with deta Anotherwordle-svelte.vercel.appgithub.com/nijat/wordleSvelte gogoprogMediumgogoprog.github.io/motuz/src/?lang=engithub.com/gogoprog/motuzJavascript\"Multilanguage supportwithout keyboard\" From day-0 the challenging part I knew will be to get an Odia keyboard. Most of the solutions use the default English keyboard. Tamil-Wordle I have been a Python programmer, I was looking for a Python-based solution, the Tamil-wordle was written in Golang. I learned (and forgot 😀) Golang in IBM, therefore I was a bit confident about it that I can recall the concepts and apply them. The project has a backend and a frontend. The front end makes calls to the backend Golang server, where the validation and verification happen. The main branch was based on CLI and the UI was in progress. There were two UI PRs were there, One UI PR (Pull Request) was built in ReactJS, which caught my attention. It had a Tamil keyboard with Alternate row functionality using the Shift key i.e. in one row you can display two rows of keys. One row normal key (the vowels) and another row (the corresponding matra/diacritics) with pressing the Shift key. Pros An Indic (Tamil) keyboard support that can be easily transformed into an Odia keyboard. Golang backend and ReactJS frontend I have knowledge once upon a time, I can recall once I see the code. Cons It was not maintained seriously, no commit for 6 days. A lot of risk on future support and maintenance. The UI was not there and all I had to bet on was a PR, which will be probably accepted by the repo owner. (It did not) The UI PR was not exactly like the original wordle game, but far from it. ReactJS/Tailwind Wordle This was started just 4 days before Dr. Aviseka pitched the idea to me. It looked promising with a clean UI. It was written in ReactJS typescript and Tailwind. I have some knowledge of ReactJS but not much of Typescript or Tailwind. However, I just had a faint memory from the CodeWithHarry video where he explained how can we create a good looking website with Tailwind CSS in just 5 minutes. I calculated he took 5 minutes, for me worst case 5 days. Pros SImple clean UI; mimics the original Wordle to a large extent. There was no backend or server-side scripting involved. Just load the website and you are all set. No back and forth API calls I need to make. The repo was maintained pretty actively and got the highest stars in wordle-clone GitHub search. Each day one-word code changes already implemented Cons No Odia keyboard support I have written many programs in Natural Language Processing in Python, but I had absolutely no idea how can I use Typescript to do text/word comparison. Thai-Wordle It was one of the first clones I had come across, where being a non-English wordle clone, the UI looked fine. It had a text box where you can type in the words before putting them into the boxes. It gave me hope that non-English wordle is possible. Pros Many rows can be used to put non-English letter entries. The text box helps to type in by physical keyboard before entering into the assigned box. Cons In a new framework called Svelte which I have never heard of before. Not even have the slightest clue. Googled a bit and got to know about it, but not much comfortable. The UI was not as beautiful as the previous Tailwind one. 🙋🏻‍♀️ Do we have a winner? (କେହି ବିଜେତା ମିଳିଲେ କି?) I have started with the Tamil Wordle first, even set up the Odia keyboard with the UI PR. Here is the picture: The non-acceptance of this UI PR haunted me down. Every passing day the risk was getting higher and higher. One fine day I decided to try my hands on the Tailwind Wordle one. Used the multi-key row structure from the Thai Wordle to design the keyboard. In Tamil-wordle it was taking Unicode, but here I had to give the actual value of the keys. It took me some time to understand why the name is Typescript, everything you write should have a predefined type associated with it. 😰 Major Challenges (ପ୍ରମୁଖ ସମସ୍ୟା) 1. Odia Keyboard ⌨ support Transforming the Keyboard From To There are other keyboards available for Odia but, how to highlight the key in sync with the grid box colors. The alignment of the keys, where to keep the consonants, the vowels the diacritics. My OpenOdia project helped me get the Odia alphabet easily. The frequent use of Halant ('୍') diacritics made me make the key a bit larger than the other keys. 2. Merging diacritics into the current cell 📦 Each key was taken as a single letter therefore, writing diacritics like aa' kaar matra ('ା') was written into the new cell on the grid as an independent letter. To merge diacritics with the non-diacritics, I have used the code snippet from Tamil-wordle Directly it was not possible to use, have to modify it for Typescript. Also I have to make further changes to do unlimited diacritics overlap with the letters, this is to write complex letters like: 'ରାଷ୍ଟ୍ର' Later on, to simplify, I got rid of the diacritics Object and made it an array of strings. export const diacritics: string[] = [ 'ଁ', 'ଂ', 'ଃ', '଼', 'ା', 'ି', 'ୀ', 'ୁ', 'ୂ', 'ୃ', 'ୄ', 'େ', 'ୈ', 'ୋ', 'ୌ', '୍', 'ୖ',' ୗ', ] export function toOdiaLetters(word: string): string[] { // Joins Unicodes to Odia letters let letters = [] for (let i = 0; i !== word.length; i++) { let character: string = word[i] if ( (diacritics.includes(character) && letters.length) || (i > 0 && word[i - 1] === '୍') ) { letters[letters.length - 1] += character } else letters.push(character) } return letters } It checks if the current key pressed is a diacritic, then merges with the previous cell. Also if the previous key is halant then merges with the previous cell, to create Juktakhyara. 3. Writing diacritics and juktakhyara in the last box 🎁 How to accept keyboard inputs even if all the cells are filled, creates an issue. After the last cell gets filled, it was not allowed to input further keys into the last cell. Need to debug the entire keyboard to grid flow multiple times to get this sorted. This looks easy, but a tricky problem to solve. 4. Maximum 🙆🏻‍♀️ word length Watching the original Wordle, we have started with 5 letter words. However, within no time, we got to know it is impossible for a common person to guess the 5 letter word, even if we gave them 10 chances. Each letterbox can have ~50 possibilities. 5 letters 50 * 5 = 250 combinations; and with 10 chances. There is no way. Initial trial runs were disasters. Then we graded it down to 4 letter words. Even with that it took us some time to figure out the word in less than 10 iterations. The possibilities are vast. There we realized the richness of the vocabulary of the Odia language. _ With the letters, when we add the diacritics and Juktakhyara Odia is an advanced language to represent a larger meaning in lesser space. In addition to feeling proud, it was a new challenge. Finally, we made it down to 3 letter words. In all these iterations, we never had a scarcity of words. We had 28,000+ 3 letter and 4 letter words. 10,000+ 5 letter words. Later I added 40,000+ more 3 letter words to increase the word strength to 70,000. 5. Typing 👩🏻‍💻 complex juktakhyara with this keyboard Though I have written 140+ articles on Odia Wikipedia, still I struggle when the Google transliteration tool fails. In this keyboard, without transliteration support I agree is a challenge 6. Calculating 🧮 the length of a word The length you see in your naked eye and for a computer are different. While 'ବିଦ୍ରୋହ' looks like a 3 letter word. To computer>> 'ବିଦ୍ରୋହ'.length 7 Which is a combination of 7 Unicode letters, \"ବ\", \"ି\", \"ଦ\", \"୍\", \"ର\", \"ୋ\" and \"ହ\" To calculate the exact length was a challenge. 7. Fixing the length of the letters support 🤷🏻‍♀️ In the original English wordle, the maximum word length was 5 to reduce it to three and make necessary changes throughout the code by removing the hardcoded values. As it is told, to start from scratch is easy, but to understand another developer's code and do changes is difficult. Everything has trade-offs. 8. Showcasing diacritics/juktakhyara mismatch 🙅🏻‍♀️ to users This was a no-brainer. Odia and almost all the Indic languages support matra/diacritics and juktakhyaras i.e. combination of two or more letters. How to match these multiple Unicode letters and successfully display a reliable message to user was a challenge. For that, I need to introduce two more colors, orange and blue. Even still there is scope for another three colors. 9. Showing hints ⚡️ to users It's easy to plain English wordle, there are only 26 letters so on each guess you get 5 / 26 = almost 20% letters covered. However, in Odia including diacritics, there are 65 keys to be entered. It takes more attempts (compute this) It does not make sense to increase the attempts, the player will be bored off by them and may leave the game. Games should bring pleasure dopamine to the player's brain. With alpha testing feedback, the demand was to implement some sort of hint after multiple failed attempts. Based on the feedback I have implemented a single letter hint if a player failed to predict a single letter on the first three attempts. 10. Hosting the site 🕸 Where can I easily build and deploy the site with custom domain support. I tried GitLab pages, Vercel and Netlify. Writing script to GitLab pages I got difficulties, switched to Vercel and finally to Netlify. Vercel and Netlify both have one-click React deployment support. Got an issue with custom domain support for Vercel, that's why moved to Netlify. The other branch builds' URLs can not be deleted in Netlify, therefore using Vercel for other branch builds (beta testing of new features) and using Netlify for production custom website support. Rewind ⏪ We have gone through the motivation behind this project. My initial analysis to satisfy the requirements. The challenges faced and the solutions we traded off with. Major USP (Unique Selling Points) are the algorithm and the vast 71,000+ 3-letter word corpus. 📖 Lessons learnt (କ'ଣ ଶିଖିବାକୁ ମିଳିଲା?) If you have an idea and do not have the necessary skills, find someone who can make it for you. Sometimes you do not know if it can be done, the only way to know is by doing it. Programming languages are just tools to solve problems. Do not get limited by a specific tool. To solve different problems, different tools are built. “When something is important enough, you do it even if the odds are not in your favor.” – Elon Musk Emotions can make people do unimaginable things. That's what makes us human. 🔮 Future plans (ଭବିଷ୍ୟତ ଯୋଜନା) Customized game specific to Odia Bhagabata by Jagannath Das, Sarala Mahabharata, and more. Jumbled sentence prediction Children education in school STEAM education Spell correction using the words we have. Sentence auto-completion Transliteration ✌🏼Conclusion (ସିଦ୍ଧାନ୍ତ) All it took was a sincere effort towards the right direction and a lot of emotion towards your motherland. People should take this as an inspiration that, yes whatever can be done in English, can be done in Indic languages too, can be done in Odia too. It has been just 10 days and we have more than 1,700 unique users from 25+ countries. More on that later. Thanks for your time. Please check out the game here: www.ଶବ୍ଦରସ.com As always, please provide your valuable feedback. Check out other versions of the Wordle in Wordles of the World and in Wordle Alternatives 🙏🏼 Acknowledgements Arunmozhi from Tamil-Wordle to share the diacritics merging code snippet. Hannah Park et al. for starting and maintaining the base[github.com/hannahcode/wordle] of the repository above this foundation the codebase has been built. Dr. Aviseka Acharya for all the inspiration and support throughout. Saswata Debadutta et al for making the logo and providing ideas on upgrading the UX. All the alpha testers who have tested the website before public release and provided their suggestions for improvement. The launch audience of Twitter space, who have provided instant feedback. The players who post their gameplay results, motivate other Odias to play, report bugs, and provide valuable feedback to us. If you find this article useful, please cite this using: @misc{Soumendrak, author = {Soumendra Kumar Sahoo}, title = {The story behind Shabdarasa}, howpublished = {\\url{https://www.blog.soumendrak.com/}}, year = {2022} } Let me know what you think at any of the following places: 🔗 LinkedIn: linkedin.com/in/soumendrak 📝 Medium: medium.com/@soumendrak 📖 Blog: blog.soumendrak.com 🐥 Twitter: twitter.com/soumendrak_ 🧑🏻‍💻 Github: github.com/soumendrak 📹 Youtube: youtube.com/@openodia","metadata":{"source":"https://blog.soumendrak.com/the-story-behind-shabdarasa","title":"The story behind Shabdarasa (ଶବ୍ଦରସ)","contentLength":2694}},{"pageContent":"ମନରେ ପ୍ରଶ୍ନ ❓ଓ ଏକ ଜିଜ୍ଞାସୁ 🧐 ମନୋଭାବ ନେଇ ଏଠାକୁ ଆସିଥିବାରୁ ଆପଣଙ୍କୁ ଅନେକ ଅନେକ ଧନ୍ୟବାଦ 🙏🏼 । ଏହି ଲେଖା ମଝିରେ କୌଣସି ସ୍ଥାନରେ କିଛି ଶବ୍ଦ ବୁଝିନପାରିଲେ ଏହି ଲେଖା ଶେଷରେ ଶବ୍ଦକୋଷରେ ମୁଁ କିଛି ଜଟିଳ ଶବ୍ଦର ଅର୍ଥ ବ୍ୟାଖ୍ୟା କରିଛି, ତାହା ଦେଖିପାରିବେ । ସଂକ୍ଷେପରେ କହିବାକୁ ଗଲେ ବ୍ଲକ୍‌ଚେନ୍‌ ହେଉଛି ଏକ ଆବଣ୍ଟିତ, ସ୍ୱଚ୍ଛ ଏବଂ ସୁରକ୍ଷିତ କାରବାର ଖାତା । ମୁଁ ବ୍ଲକ୍‌ଚେନ୍‌ ବିଷୟରେ ଜାଣି କ'ଣ କରିବି 🤷🏻‍♂️? ଆପଣ ଏହି ଲେଖା ପଢ଼ୁଛନ୍ତି📖 ଅର୍ଥାତ, ଆପଣ ଇଣ୍ଟରନେଟ ଉପଯୋଗ କରୁଛନ୍ତି । ଇଣ୍ଟରନେଟରେ କ'ଣ/କାହିଁକି ପରିବର୍ତ୍ତନ ହେବାକୁ ଯାଉଛି ତାହା ଜାଣିବା ପାଇଁ ଆଗକୁ ପଢ଼ନ୍ତୁ । ୱେବ ୧.୦ (ଇଣ୍ଟରନେଟରେ ଆପଣ କେବଳ ତଥ୍ୟ ପଢ଼ିପାରୁଥିଲେ, କିଛି ଲେଖି ପାରୁନଥିଲେ) ଏବଂ ୱେବ ୨.୦ ରେ (ବର୍ତ୍ତମାନର ଇଣ୍ଟରନେଟ, ଯେଉଁଠି ପଢ଼ିବା ସହ ନିଜ ଲେଖା, ଭିଡିଓ ଓ କଥାବାର୍ତ୍ତା ୱେବସାଇଟ କିମ୍ବା ମୋବାଇଲ ଆପ୍ ରେ ପ୍ରକାଶ କରିପାରୁଛନ୍ତି), ୱେବ ୩.୦ ବର୍ତ୍ତମାନ ଆରମ୍ଭ ହେଉଛି, ଏଥିରେ ବହୁତ ସୁଯୋଗ ରହିଛି । ବିଶ୍ବସ୍ତରରେ ଲୋକମାନେ ଏହାକୁ ଉପଯୋଗ କରି ମେଟାଭର୍ସ, ଏନଏଫଟି, ଡାପ୍ସ ଇତ୍ୟାଦି ପ୍ରାରମ୍ଭ କରିଦେଲେଣି, ଯେତେଶୀଘ୍ର ଆମେ ଏ ବିଷୟରେ ଜାଣି ଆପଣେଇବା ସେତେ ଆଗକୁ ଯାଇପାରିବା । ବିଟ୍‍କଏନ୍ , ଇଥେରିଅମ୍ ଏବଂ ଅନ୍ୟାନ୍ୟ କ୍ରିପ୍ଟୋକରେନ୍ସି ଗୁଡ଼ିକ ଏହି ବ୍ଲକ୍‌ଚେନ୍‌ ପ୍ରଯୁକ୍ତି ଉପରେ ପର୍ଯ୍ୟବେସିତ । ଏବେ ଲୋକମାନେ ଭିଡିଓ କଲ କରି ଦୂରରେ ଥିଲେ ମଧ୍ୟ ପରସ୍ପରକୁ ଦେଖି କଥାବାର୍ତ୍ତା ହେଇପାରୁଛନ୍ତି, ଭବିଷ୍ୟତରେ ସାଧାରଣ ଲୋକେ ମେଟାଭର୍ସରେ ପରସ୍ପର ମଧ୍ୟରେ କଥାବାର୍ତ୍ତା (ଏବଂ ଅନ୍ୟାନ୍ୟ ବହୁତ କିଛି ) ହେବେ, ଏହି ପ୍ରଯୁକ୍ତି ପଛରେ ମଧ୍ୟ ବ୍ଲକ୍‌ଚେନ୍‌ ରହିଛି । ଧରନ୍ତୁ ଏସବୁ ଆପଣଙ୍କର ଆଦୌ ପସନ୍ଦ ହଉନି, କିନ୍ତୁ ଟିକେ ଜାଣିଦେବାରେ କ୍ଷତି କ'ଣ? ବ୍ଲକ୍‌ଚେନ୍‌ ବିଷୟରେ ଖଟିରେ, ସ୍କୁଲ, କଲେଜ କି ଘରେ ଦି'ପଦ କିଏ ପଚାରିଲେ କହି ତ ପାରିବେ । ତା'ଛଡ଼ା ଆଗକୁ ମୁଁ ବିଟ୍‍କଏନ୍, ୱେବ ୩.୦ ବିଷୟରେ ଲେଖା ପ୍ରକାଶ କରିବି, ସେସବୁ ବୁଝିବା ପାଇଁ ବ୍ଲକ୍‌ଚେନ୍‌ ର ଏହି ମୂଳଦୁଆ ଦୃଢ଼ କରିବା ନିହାତି ଆବଶ୍ୟକ । ଚାଲନ୍ତୁ ଆରମ୍ଭ କରିବା । 🙏🏼 ଜୟ ଜଗନ୍ନାଥ 🙏🏼 👉🏼 ଉପକ୍ରମ 🤔 ଇଣ୍ଟରନେଟ ଓ ତାହାର ସମସ୍ୟା କମ୍ପ୍ୟୁଟରରେ ଆମେ ଗାଣିତିକ କାର୍ଯ୍ୟ କରୁ । କଠିନରୁ କଠିନତମ ଗାଣିତିକ କାମ କମ୍ପ୍ୟୁଟର ଆଖି ପିଛୁଳାକେ କରିଦିଏ । କିଛି କାମ ଏହିପରି ଥାଏ ସେହି ଗଣନାଙ୍କ ହିସାବ ଦୀର୍ଘସ୍ଥାୟୀ ରଖିବାକୁ ପଡ଼େ, ଯାହାକୁ ଆମେ ପରେ ଉପଯୋଗ କରୁ । ଯେଉଁଠାରେ ଆମେ ଏହାକୁ ରଖୁ ତାହାକୁ (ମୋଟାମୋଟି ଭାବରେ) ସ୍ମୃତିକୋଷ/ମେମୋରୀ (Hard-disk memory) କୁହାଯାଇଥାଏ । ଯେପରି ଆମ ଘରକୁ ବିଦ୍ୟୁତ ଆଣିବା ପାଇଁ ଆମକୁ ବିଦ୍ୟୁତ ଖୁଣ୍ଟି ସହିତ ସଂଯୋଗ କରିବାକୁ ପଡ଼େ, ସେହିପରି ଅନ୍ୟ କମ୍ପ୍ୟୁଟରରୁ ତଥ୍ୟ ନେବା ଆଣିବା କରିବା ପାଇଁ ନିଜକୁ ଇଣ୍ଟରନେଟ ଦ୍ୱାରା ସଂଯୋଗ କରିବାକୁ ପଡ଼ିଥାଏ । କମ୍ପ୍ୟୁଟର ମେମୋରୀରେ ଥିବା ତଥ୍ୟକୁ ସଜାଡ଼ି ରଖିବା ପାଇଁ ବିଭିନ୍ନ ଡାଟାବେସ ସଂରଚନା କରାଯାଇଛି ଯେପରି MySQL, MongoDB, ଇତ୍ୟାଦି । ଆମାଜନ ୱେବ ସର୍ଭିସେସର (AWS) ପୃଥିବୀସାରା ଥିବା ଡାଟା ସେଣ୍ଟରଗୁଡ଼ିକର (ଯେଉଁଠାରେ ବହୁତ ଡାଟାବେସ ଥାଏ) ମାନଚିତ୍ର ଓଡ଼ିଶାରେ ବିଦ୍ୟୁତ⚡️ ତିଆରି ହୁଏ କେଉଁଠି ମୁଖ୍ୟତଃ ତାଳଚେର କିମ୍ବା ହୀରାକୁଦ ଚିପିଲିମାରେ, ସେହିପରି ଇଣ୍ଟରନେଟର ଅଧିକାଂଶ ୱେବସାଇଟ ତଥ୍ୟ ମୁମ୍ବାଇ (ଗୋଟିଏ AWS ଡାଟା ସେଣ୍ଟର) କିମ୍ବା ଅନ୍ୟାନ୍ୟ ଦେଶରେ ରଖାଯାଇଥାଏ । ଏକ ଉଦାହରଣ ଦ୍ୱାରା ବୁଝିବା: ଆମେ ଆମ ବ୍ରାଉଜରରେ youtube.com ୱେବସାଇଟ ଖୋଲିଲେ, ଆମ ବ୍ରାଉଜରଟି ଏହି ୱେବସାଇଟକୁ ରଖିଥିବା କମ୍ପ୍ୟୁଟରର ଡାଟାବେସରୁ ତଥ୍ୟ ଆଣି ଆମକୁ ଦେଇଥାଏ । ୟୁଟ୍ୟୁବର ଏହି ଭିଡିଓ ତଥ୍ୟ, କେବଳ ୟୁଟ୍ୟୁବଦ୍ୱାରା ଗଠିତ ଡାଟାବେସରେ ସଂରକ୍ଷିତ ରହିଥାଏ । ଧରନ୍ତୁ ଆପଣ ୟୁଟ୍ୟୁବରେ କୌଣସି ଭିଡିଓ🎥 ଅପଲୋଡ଼ କରିଛନ୍ତି, ୟୁଟ୍ୟୁବ ଚାହିଁଲେ ଆପଣଙ୍କ ଭିଡିଓକୁ ଖରାପ କହି ମନଇଛା ବିଲୋପ କରିପାରିବ କିମ୍ବା ୟୁଟ୍ୟୁବର ଡାଟାବେସ ବିଲୋପ ହେଇଗଲେ, ଆପଣଙ୍କର ବହୁ କଷ୍ଟରେ ନିର୍ମିତ୍ତ ଭିଡିଓ ମଧ୍ୟ ସବୁଦିନ ପାଇଁ ନଷ୍ଟ ହୋଇଯିବ । 😰 ଏଠାରେ ୟୁଟ୍ୟୁବର ଡାଟାବେସ ହେଉଛି ବିଫଳତାର ଏକକ ବିନ୍ଦୁ (single point of failure) 🤨। ୟୁଟ୍ୟୁବ ପାଖରେ ଏବେ କ୍ଷମତା କେନ୍ଦ୍ରୀଭୂତ, ଭିଡିଓ ଦୁନିଆର ସେ ରାଜା ; କାଲି ଯଦି ସେ କାଉ🕊 ଧଳା କହି ନିଜ ୱେବସାଇଟରେ ସବୁ କଳା କାଉ ଭିଡିଓ ଡିଲିଟ କରିଦିଏ, କଡ଼ା ନିନ୍ଦା ଛଡ଼ା କେହି କିଛି କରିପାରିବେନି । ଏଠାରେ ୟୁଟ୍ୟୁବ ଉପରେ ମୋର କିଛି ଆରୋପ ନାହିଁ ବରଂ ଏକ ଉଦାହରଣ ସ୍ୱରୂପ ନିଆଯାଇଛି, ୟୁଟ୍ୟୁବ ଜାଗାରେ ଆମେ ଆମାଜନ, ଆପଲ, ଇନ୍ସଟାଗ୍ରାମ୍ , ଗୁଗଲ, ହ୍ଵାଟ୍ସଆପ, ଜିଓ ଇତ୍ୟାଦି ମଧ୍ୟ ଉଦାହରଣ ସ୍ୱରୂପ ନେଇପାରିବା । ଆମ ଉଦାହରଣ ସହିତ ଏହାକୁ ସମ୍ପର୍କିତ କଲେ, ବିଦ୍ୟୁତ ସବ-ଷ୍ଟେସନରୁ ବିଦ୍ୟୁତ କାଟିଦେଲେ ଆମ ଘର ଅନ୍ଧାର । ବିଦ୍ୟୁତ ସବ-ଷ୍ଟେସନ ଉପରେ ଆମେ ଅତ୍ୟଧିକ ନିର୍ଭର କରୁଛୁ । ଏଥିରୁ କ'ଣ ଜଣାପଡ଼ିଲା? ବର୍ତ୍ତମାନର ଇଣ୍ଟରନେଟରେ ଆମ ତଥ୍ୟର ମାଲିକ ଆମେ ନୁହଁ । ଏହି ସମସ୍ୟାରୁ ସମାଧାନ କରୁଛି ବ୍ଲକ୍‌ଚେନ୍‌ ପ୍ରଯୁକ୍ତି (technology) । 🔗 ବ୍ଲକ୍‌ଚେନ୍‌ ବ୍ଲକ୍‌ଚେନ୍‌ ହେଉଛି ଏଭଳି ଏକ ତଥ୍ୟଭଣ୍ଡାର ବା ଡାଟାବେସ ଯେଉଁଠାରେ ତଥ୍ୟ ସ୍ୱଚ୍ଛ (ସର୍ବସାଧାରଣରେ ସମସ୍ତ ବ୍ଲକ୍‌ଚେନ୍‌ କାରବାର ତଥ୍ୟ ପ୍ରକାଶିତ ହୁଏ), ଆବଣ୍ଟିତ ଏବଂ ଅପରିବର୍ତ୍ତନଶୀଳ ଅବସ୍ଥାରେ ରଖାଯାଏ । ଉଦାହରଣ ସ୍ୱରୂପ ବ୍ଲକ୍‌ଚେନ୍‌ ଆପଣଙ୍କର ମୋବାଇଲ📱 ହେଲେ , ବିଟ୍‍କଏନ୍ , ଇଥେରିଅମ୍ ଇତ୍ୟାଦି ହେଉଛନ୍ତି ଏହାର ଏକ ଏକ ଆପ/ଆପ୍ଲିକେସନ, ୟୁଟ୍ୟୁବ, ଟିକଟକ ଇତ୍ୟାଦି ପରି । ବିଟ୍‍କଏନ୍ ନେଟୱର୍କରେ ହେଉଥିବା ସମସ୍ତ କାରବାର ଆପଣ ଏଠାରେ ଦେଖିପାରିବେ । ପୃଥିବୀସାରା ବିଛେଇ ହୋଇଥିବା ବିଟ୍‍କଏନ୍ ର ବ୍ଲକ୍‌ଚେନ୍‌ ଡାଟାବେସର ଗୋଟିଏ ମାନଚିତ୍ର । ସୂତ୍ର ବ୍ଲକ୍‌ଚେନ୍‌ ଡାଟାବେସ ପୃଥିବୀସାରା ଅବସ୍ଥିତ ଅନେକଗୁଡ଼ିଏ କମ୍ପ୍ୟୁଟରରେ 🖥 ଚାଲିଥାଏ, ଏହି କମ୍ପ୍ୟୁଟରଗୁଡ଼ିକୁ ନୋଡ (node) କୁହାଯାଏ । ଏହି କମ୍ପ୍ୟୁଟରର ବ୍ୟବହାରକାରୀଙ୍କୁ ମାଇନର (miner) କୁହାଯାଏ ଯେଉଁମାନେ ମାଇନିଂ (mining) କରନ୍ତି । ଏହି ନାମକରଣ ବିଟ୍‍କଏନ୍ କୁ ସୁନା🥇 ସହିତ ତୁଳନା କରିଦିଆଯାଇଛି । ନୂତନ ସୁନା ବା କାଞ୍ଚନକୁ ଯେପରି ମାଟିରୁ ଖୋଳିବାକୁ ⛏ ପଡ଼େ, ସେହିପରି ନୂଆ ବିଟ୍‍କଏନ୍ ପାଇଁ ହେଉଥିବା ପ୍ରକ୍ରିୟାକୁ ମାଇନିଂ ଅର୍ଥାତ ଖୋଳିବା କୁହାଯାଇଥାଏ । ମାଇନର ବା ଖୋଦନକାରୀ ମାନଙ୍କୁ ବ୍ଲକ୍‌ଚେନ୍‌ ଡାଟାବେସ ତଥ୍ୟ ଯାଞ୍ଚ ତଦାରଖ କରିବାପାଇଁ ଅନୁକମ୍ପା ରାଶି ମିଳିଥାଏ । ମାଇନରମାନେ ବିଟ୍‍କଏନ୍ ର ମେରୁଦଣ୍ଡ ଅଟନ୍ତି । ବ୍ଲକ୍‌ଚେନ୍‌ରେ ତଥ୍ୟ ଜଣେ ଦୁଇ ଜଣଙ୍କ ପାଖରେ ନରହି ବହୁତ ଜଣଙ୍କ ପାଖରେ ବିଛେଇ ହୋଇ ରହିଥାଏ । ଏହା ଫଳରେ ଏହାମଧ୍ୟରେ ଥିବା ତଥ୍ୟ ଉପରେ କାହାର ଏକଚାଟିଆ ଶାସନ ନଥାଏ । ବ୍ଲକ୍‌ଚେନ୍‌ ହେଉଛି ଆବଣ୍ଟିତ ସୌରଶକ୍ତି ଭଳି, ସମସ୍ତେ ନିଜ ଘର ଛାତ ଉପରେ ସୌର ପ୍ୟାନେଲ ଲଗାଇବେ , ନିଜର ବୈଦିତୁକ ଚାହିଦା ପୂରଣ ହେଲାପରେ ବଳକା ବିଦ୍ୟୁତ, ବିଦ୍ୟୁତଗ୍ରୀଡକୁ ଫେରାଇଦେବେ । ସବ-ଷ୍ଟେସନ ଉପରେ ଆମକୁ ଏତେ ନିର୍ଭର କରିବାକୁ ପଡ଼ିବନି । ✅ ବ୍ଲକ୍‌ଚେନ୍‌ ବୈଶିଷ୍ଟ୍ୟ ଏବେ ବ୍ଲକ୍‌ଚେନ୍‌ ବିଷୟରେ ଆମେ ଟିକେ ଭଲ ସେ ବୁଝିବା, କଣ କଣ ସବୁ ଏହାଦ୍ୱାରା ହୋଇପାରିବ । 📝 ହିସାବ ଖାତା (ledger) ଯେପରି ଗୁମାସ୍ତା ବାବୁ ତାଙ୍କ ହିସାବ ଖାତାରେ କିଏ କେତେ ଟଙ୍କା କେବେ ନେଲା ଲେଖି ରଖନ୍ତି, ସେହିପରି ବ୍ଲକ୍‌ଚେନ୍‌ ଡାଟାବେସରେ ମାଇନରମାନେ ଗୋଟି ଗୋଟି ହିସାବ କାରବାର ଚିଠା କରି ରଖିଥାନ୍ତି । କେହିଯଦି ବ୍ଲକ୍‌ଚେନ୍‌ ରେ ଭୁଲ ତଥ୍ୟ ଦେଇ ଗୋଳମାଳ କରିବାକୁ ଚେଷ୍ଟା କରନ୍ତି, ସେସବୁ ଚିଠାରେ ଲେଖାଯାଇଥାଏ । 🧞‍♂️ ଦୀର୍ଘସ୍ଥାୟୀ ଏହା ଏକ ଦୀର୍ଘସ୍ଥାୟୀ ଡାଟାବେସ ଅଟେ, ଥରେ ଏଥିରେ ଏକ କାରବାର ଲିଖିତ ହୋଇଗଲେ, ଏହାକୁ ବିଲୋପ କିମ୍ବା ପରିବର୍ତ୍ତନ କରିବା ଅସମ୍ଭବ । 🔐 ସୁରକ୍ଷିତ କିଏ କାହା ସହିତ କାରବାର କଲା ଓ ଅନ୍ୟାନ୍ୟ ତଥ୍ୟଗୁଡ଼ିକ ଏକ ଜଟିଳ ଗାଣିତିକ ହ୍ୟାଶ୍ ଫଳନ ଦ୍ୱାରା ସୂଚିତ କରାଯାଇଥାଏ । ⏰ ସାମୟିକ ପାଖାପାଖି ପ୍ରତି ୧୦ ମିନିଟରେ ବିଟ୍‍କଏନ୍ ବ୍ଲକ୍‌ ତିଆରି ହେଉଥିବାର ଏକ ଦୃଶ୍ୟ - ଉତ୍ସ କିଛି ଏକ ହାରାହାରି ସମୟ ପରେ ଏକ ନୂଆ ବ୍ଲକ୍‌ (ନିମ୍ନରେ ଭଲ ସେ ବୁଝାଯାଇଛି), ବ୍ଲକ୍‌ଚେନ୍‌ ରେ ଯୋଡ଼ି ହୋଇଥାଏ । ଏହି ନୂତନ ବ୍ଲକ୍‌ରେ ଏହାର ପୂର୍ବ ବ୍ଲକ୍‌ ର ସୂଚକ ରହିଥାଏ, ତେଣୁ ଯେତେ ସମୟ ଅତିକ୍ରମ କରିଚାଲେ ନୂଆ ନୂଆ ବ୍ଲକ୍‌, ବ୍ଲକ୍‌ଚେନ୍‌ ରେ ଯୋଡ଼ି ହୋଇଚାଲେ, ତେଣୁ ପୁରୁଣା ବ୍ଲକ୍‌ରେ କୌଣସି କାରବାରରେ ପରିବର୍ତ୍ତନ କରିବା ସେତେ କଷ୍ଟକର ହୋଇଯାଏ । 🛠 ଗଠନ ଓ ସଂରଚନା 🧊 ବ୍ଲକ୍‌ ଯେପରି କିଛି ଗ୍ରାମକୁ ନେଇ ବ୍ଲକ ଗଠନ ହୁଏ, ସେହିପରି କିଛି କାରବାର (transaction)କୁ ନେଇ ଏକ ବ୍ଲକ୍‌ ତିଆରି ହୋଇଥାଏ । ଉଦାହରଣ ସ୍ୱରୂପ ଏକ ବିଟ୍‍କଏନ୍ ବ୍ଲକ୍‌ ରେ ପାଖାପାଖି ୧୦୦୦ରୁ ୨୫୦୦ କାରବାରର ତଥ୍ୟ ରହିଥାଏ । ଉପରୋକ୍ତ ଛବିରେ ଥିବା ବ୍ଲକ୍‌ ରେ ବ୍ଲକ୍‌ ର ନାମ ଏକ କ୍ରିପ୍ଟୋଗ୍ରାଫିକ ହ୍ୟାଶ୍ ଦ୍ୱାରା ପ୍ରସ୍ତୁତ ହୋଇଛି । ଉଦାହରଣ ସ୍ୱରୂପ ୨୦୨୨ ମସିହାର ପ୍ରଥମ ବିଟ୍‍କଏନ୍ ବ୍ଲକ୍‌ ଦେଖିବା ପାଇଁ ଏଠାରେ କ୍ଲିକ କରନ୍ତୁ । ଗୋଟିଏ ହ୍ୟାଶ୍ ପ୍ରସ୍ତୁତିର ଉଦାହରଣ ନିମ୍ନରେ ପାଇଥନ ପ୍ରୋଗ୍ରାମରେ ଦିଆଯାଇଛି: from hashlib import sha256 କାରବାର = \"ପ୍ରତୀକ ବାବୁ ମନୀଷଙ୍କୁ ୧୦୦୦ ଟଙ୍କା ଦେଲେ\" କାରବାର = କାରବାର.encode(\"utf-8\") ହ୍ୟାଶ୍ = sha256(କାରବାର).hexdigest() print(ହ୍ୟାଶ୍) 85a25b484e806b305e641e45bfc0681e6321a497f1afbfc9238c586bb6abbb0b ଧରନ୍ତୁ କେହି ଆସି କାରବାର ତଥ୍ୟକୁ ପରିବର୍ତ୍ତନ କରିଦିଅନ୍ତି, ତେବେ ଏହି କାରବାରର ହ୍ୟାଶ୍ ସୂଚକ ପୁରା ପରିବର୍ତ୍ତନ ହୋଇଯିବ । ଏହାକୁ ପରେ ମର୍କେଲ ଟ୍ରି ଡାଟା ଷ୍ଟ୍ରକ୍ଚର ଦ୍ୱାରା ଧରା ପକାଯାଇପାରିବ । କାରବାର = \"ପ୍ରତୀକ ବାବୁ ମନୀଷଙ୍କୁ ୧୦୦୦୦ ଟଙ୍କା ଦେଲେ\" କାରବାର = କାରବାର.encode(\"utf-8\") ହ୍ୟାଶ୍ = sha256(କାରବାର).hexdigest() print(ହ୍ୟାଶ୍) 916c09ce430b83de0349c96d2118c99aeba22d034e98bcc16792b82e9daea0e0 ମର୍କେଲ ଟ୍ରି ଦ୍ୱାରା କିଭଳି ଏହାକୁ ନିରୀକ୍ଷଣ ହୁଏ ତାହା ଆମେ ପରବର୍ତ୍ତୀ ଲେଖାରେ ଶିଖିବା । ⛓ ଚେନ୍‌ ସମସ୍ତ ବ୍ଲକ୍‌ ରେ ତାର ପୂର୍ବବର୍ତ୍ତୀ ବ୍ଲକ୍‌ ର ସୁଚକାଙ୍କ (ବା ହ୍ୟାଶ୍ ଫଳନ) ରହିଥାଏ । ଯେହେତୁ ପ୍ରଥମ ବ୍ଲକ୍‌ ପୂର୍ବରୁ ଆଉ କୌଣସି ବ୍ଲକ୍‌ ନଥାଏ ଏହାକୁ ଜେନେସିସ (genesis) ବ୍ଲକ୍‌ କୁହାଯାଏ ଏବଂ ଏହାର ପୂର୍ବବର୍ତ୍ତୀ ବ୍ଲକ୍‌ ସୁଚକାଙ୍କ ନଥାଏ । - ଯେହେତୁ ଏହି ଡାଟାବେସ ବା ତଥ୍ୟ ଭଣ୍ଡାରରେ ଏକ କ୍ଷୁଦ୍ରତମ🤏🏼 ପଦାର୍ଥ ହେଉଛି ବ୍ଲକ୍‌ ଏବଂ ବ୍ଲକ୍‌ ଗୁଡ଼ିକ ପରସ୍ପର ମଧ୍ୟରେ ସମୟାନୁମିକ ହିସାବରେ ଯୋଡ଼ିହେଇ ଏକ ଶୃଙ୍ଖଳ ବା ଚେନ୍‌ ତିଆରି କରନ୍ତି ଏହି ତଥ୍ୟ ଭଣ୍ଡାରକୁ ବ୍ଲକ୍‌ଚେନ୍‌ କୁହାଯାଏ । ଗୋଟିଏ ନୂତନ କମ୍ପ୍ୟୁଟରକୁ ନୋଡ (ଯେଉଁଥିରେ ମାଇନିଂ ହୁଏ) ହେବାପାଇଁ ଜେନେସିସ ବ୍ଲକ୍‌ ଠାରୁ ଆରମ୍ଭ କରି ନୂଆ ଯୋଡ଼ିହୋଇଥିବା ବ୍ଲକ୍‌ ପର୍ଯ୍ୟନ୍ତ ସମ୍ପୂର୍ଣ୍ଣ ବ୍ଲକ୍‌ଚେନ୍‌ କୁ ଡାଉନଲୋଡ⏬ କରିବାକୁ ପଡ଼େ । ଏହାକୁ ବୁଟ୍ ଷ୍ଟ୍ରାପିଙ୍ଗ୍ (Bootstraping) କୁହାଯାଇଥାଏ । ✅ ବ୍ଲକ୍‌ଚେନ୍‌ର ଉପକାରୀତା ⚡️ ଶୀଘ୍ର ବ୍ଲକ୍‌ଚେନ୍‌ ଆଗରେ ସ୍ଥାନ, କାଳ, ବସ୍ତୁ , ପାତ୍ର ସମସ୍ତେ ସମାନ; ଖାଲି ଦୁଇଟି କାରବାର ଠିକଣା ଥିବା ଦରକାର । ବ୍ଲକ୍‌ଚେନ୍‌ ଦ୍ୱାରା ଆମେ ଅତି କମ ସମୟରେ ବିନା କୌଣସି ତୃତୀୟ ପକ୍ଷର ହସ୍ତକ୍ଷେପରେ ଗୋଟିଏ ଠିକଣାରୁ ଆଉ ଗୋଟିଏ ଠିକଣାକୁ କାରବାର କରିପାରିବା । ଉଦାହରଣ ସ୍ୱରୂପ, ଓଡ଼ିଶାରୁ ଆମେରିକାକୁ ବିଟ୍‍କଏନ୍ ପଠାଇବାକୁ ମାତ୍ର ୧୦ ମିନିଟ ⏰ ଲାଗିଥାଏ । କିଛି ନୂତନ କ୍ରିପ୍ଟୋକରେନ୍ସିରେ ଆହୁରି ଶୀଘ୍ର⏩ କାରବାର ହୋଇପାରୁଛି । 🙅🏻‍♂️ ଅପରିବର୍ତ୍ତନୀୟ ବ୍ଲକ୍‌ଚେନ୍‌ରେ ଥରେ ଗୋଟିଏ କାରବାର ଲିପିବଦ୍ଧ ହୋଇଗଲେ, ଏହାକୁ ବଦଳେଇବା ନିହାତି କଷ୍ଟକର କାମ । ଯେତେ ଯେତେ ନୂଆ ନୂଆ ବ୍ଲକ୍‌ ଯୋଡ଼ି ହୋଇଯାଏ, ଗୋଟିଏ କାରବାରକୁ ପରିବର୍ତ୍ତନ କରିବା ସେତେ କଷ୍ଟ ହୋଇଯାଏ । ଉଦାହରଣ ସ୍ୱରୂପ ବିଟ୍‍କଏନ୍ ରେ ପାଖାପାଖି ୧୦ ମିନିଟରେ ଗୋଟିଏ ନୂଆ ବ୍ଲକ୍‌ ଯୋଡ଼ି ହୋଇଯାଏ । 🔑 ସୁରକ୍ଷିତ ବ୍ଲକ୍‌ଚେନ୍‌ SHA-256 ଅତି ସୁରକ୍ଷିତ 🔐 ହ୍ୟାଶ୍ ଆଲଗୋରିଦମ ବ୍ୟବହାର କରି ବ୍ଲକ୍‌ଚେନ୍‌ର ସମସ୍ତ ତଥ୍ୟକୁ ସୁରକ୍ଷିତ ଭାବରେ ରଖିଥାଏ , ତେଣୁ ଏହି ତଥ୍ୟ ସର୍ବସାଧାରଣରେ ସ୍ଵଛ ଭାବରେ ପ୍ରକାଶିତ ହେଲେ ମଧ୍ୟ ସୁରକ୍ଷା ଓ ବ୍ୟକ୍ତିଗତ ଗୋପନୀୟତା ଉପରେ କୌଣସି ଆଞ୍ଚ ଆସିନଥାଏ । ଏହାଛଡ଼ା ଆବଣ୍ଟିତ ଲେଜର ପ୍ରଯୁକ୍ତି (distributed ledger technology) ବଳରେ ବ୍ଲକ୍‌ଚେନ୍‌ର ତଥ୍ୟର ଗୋଟିଏ ଗୋଟିଏ ନକଲ ମାଇନରମାନଙ୍କ କମ୍ପ୍ୟୁଟରରେ ରହିଥାଏ ତେଣୁ କୌଣସି ଏକ ଅଞ୍ଚଳ କିମ୍ବା ଦେଶରେ କୌଣସି କାରଣରୁ ସମସ୍ତ କମ୍ପ୍ୟୁଟର ବନ୍ଦ ହେଇଗଲେ ମଧ୍ୟ ଏହାର ତଥ୍ୟର ସୁରକ୍ଷାରେ କୌଣସି ବିପଦ ଆସିନଥାଏ । ☘️ ଦଲାଲ ବିହୀନ ଏହି ସବୁ ସୁବିଧା ଯୋଗୁଁ ବିନା କୌଣସି ମଧ୍ୟସ୍ଥି କିମ୍ବା ଦଲାଲ ହସ୍ତକ୍ଷେପରେ ଅର୍ଥ ଦେଣନେଣ ବା ଅନ୍ୟ କାରବାର ହେଇପାରେ । ମୁଖ୍ୟତଃ ବିଦେଶକୁ କିମ୍ବା ବିଦେଶରୁ କାରବାର କରିବାରେ ମଧ୍ୟସ୍ଥି ପାଉଣା💵 ଦେବାକୁ ପଡ଼ିନଥାଏ (ଉଦାହରଣ ସ୍ୱରୂପ ବିଟ୍‍କଏନ୍ ପଠାଇବା ପାଇଁ ୦.୦୦୦୩ % ପାଉଣା ଦେବାକୁ ପଡ଼ିଥାଏ) । ଯେହେତୁ ଗୋଟିଏ ବ୍ଲକ୍‌ ରେ ୨୫୦୦ ପାଖାପାଖି କାରବାର ରହେ ତେଣୁ ଏତେ କମ ମୂଲ୍ୟ ଦେବାକୁ ପଡ଼ିଥାଏ । 🖐🏼 ଆବଣ୍ଟିତ (distributed) ଯେହେତୁ କେହି କେନ୍ଦ୍ରୀୟ ଅଧିକାରୀ ନଥାନ୍ତି (ୱେବ ୨.୦ ଭଳି) ସମସ୍ତଙ୍କର ସମାନ ସାର୍ବଭୌମତ୍ୱ ରକ୍ଷା ହୋଇଥାଏ, କିଛି ହାତମୁଠା ଲୋକଙ୍କ ଇଛା ଅନୁସାରେ ପରିବର୍ତ୍ତନ କରାନଯାଇ ସର୍ବସାଧାରଣ (ମାଇନର ମାନଙ୍କର) ମତ ବିଚାରକୁ ନିଆଯାଇଥାଏ । ❗️ ବ୍ଲକ୍‌ଚେନ୍‌ ସମ୍ମୁଖରେ ଥିବା କିଛି ବାଧା ଟେକ୍ନୋଲୋଜି ବା ପ୍ରଯୁକ୍ତି ହେଉଛି ଦୁଇ ଧାର ଖଣ୍ଡା ଭଳି ଯେତେ ଭଲ ସେତେ ଖରାପ, ଭଲକୁ ଗ୍ରହଣ କରି ଖରାପକୁ ଦୁରେଇ ରଖିବା ବୁଦ୍ଧିମତ୍ତାର ପରିଚୟ । ↓ ପ୍ରଚୁର ଶକ୍ତି ଖର୍ଚ୍ଚ ଉଦାହରଣ ସ୍ୱରୂପ ବିଟ୍‍କଏନ୍ ରେ ଗୋଟିଏ ବ୍ଲକ୍‌ର କାରବାରକୁ ଯାଞ୍ଚ କରିବାପାଇଁ ବିଶ୍ବସାରା ଯେଉଁ କମ୍ପ୍ୟୁଟର (ନୋଡ) ଚାଲେ ସେମାନେ ପ୍ରୁଫ ଅଫ ୱାର୍କ ନାମକ ଏକ ସହମତି (consensus) ବ୍ୟବହାର କରନ୍ତି । ଏହି ସହମତିରେ ପହଁଚିବା ସମସ୍ତ ମାଇନିଂ ନୋଡକୁ ଜଟିଳ ଗାଣିତିକ ସମସ୍ୟା ସମାଧାନ କରିବାକୁ ପଡ଼େ , ଏଥି ପାଇଁ ବହୁତ ଶକ୍ତିଶାଳୀ ଜିପିୟୁ କମ୍ପ୍ୟୁଟର ଆବଶ୍ୟକ ହୁଏ । ଏହି ସବୁ କମ୍ପ୍ୟୁଟର ବହୁତ ବିଦ୍ୟୁତ ଶକ୍ତି ଏବଂ ସମୟ ଅପଚୟ କରିଥାନ୍ତି । ଏହାକୁ ଦୃଷ୍ଟିରେ ରଖି ଇଥେରିୟମ ପ୍ରୁଫ ଅଫ ୱାର୍କ ଛାଡି ପ୍ରୁଫ ଅଫ ଷ୍ଟେକ ଆପଣେଇବାକୁ ଚେଷ୍ଟା କରୁଛି । ↗️ ବର୍ଦ୍ଧନଶୀଳତା ଅସୁବିଧା ଯେହେତୁ ବହୁତ ଗୁଡିଏ ନୋଡ ବିଭିନ୍ନ ସ୍ଥାନରେ ରହିଛି ଏବଂ ସମସ୍ତ ନୋଡକୁ ବହୁତ ଶକ୍ତିଶାଳୀ କମ୍ପ୍ୟୁଟର ଆବଶ୍ୟକ ଏତେଗୁଡ଼ିଏ କାରବାରକୁ ସବୁ ଯାଞ୍ଚ କରିବା ସମୟସାପେକ୍ଷ । ଯେତେଯେତେ ଅଧିକ ଲୋକ ବ୍ଲକ୍‌ଚେନ୍‌ ବ୍ୟବହାର କରିବେ କାରବାର ସମ୍ପୂର୍ଣ୍ଣ ହେବା ସମୟ ସେତେ ଡେରି ଲାଗିପାରେ । ଉଦାହରଣ ସ୍ୱରୂପ VISA ପ୍ରତି ସେକେଣ୍ଡକୁ ୧୭୦୦ କାରବାର କଲାବେଳେ ବିଟ୍‍କଏନ୍ ସେକେଣ୍ଡକୁ ମାତ୍ର ୪.୬ଟି କରିଥାଏ । ହେଲେ ଏହାର ପ୍ରତିକାର ପାଇଁ ଅନେକ ଗୁଡ଼ିଏ ଦ୍ୱିତୀୟ ଲେୟାର କ୍ରିପ୍ଟୋକରେନ୍ସି ଯଥା ପଲିଗନ୍ , ସୋଲାନା ଇତ୍ୟାଦି କାମ କରୁଛନ୍ତି । 📖 ଶବ୍ଦକୋଷ ୱେବ ୧.୦/ୱେବ ୨.୦/ୱେବ ୩.୦: ଇଣ୍ଟରନେଟରେ ଥିବା ୱେବସାଇଟକୁ ସଂକ୍ଷେପରେ ୱେବ କୁହାଯାଏ । ୱେବସାଇଟର ବିବର୍ତ୍ତନକୁ ନେଇ ଏହାକୁ ତିନୋଟି ସଂସ୍କରଣରେ ନାମିତ କରାଯାଇଛି: ୱେବ ୧.୦ (୧୯୯୧-୨୦୦୪ ମସିହା), ୱେବ ୨.୦ (୨୦୦୪-ବର୍ତ୍ତମାନ) ଏବଂ ୱେବ ୩.୦ । ମେଟାଭର୍ସ, ଏନଏଫଟି, ଡାପ୍ସ: ଏହିସବୁ ହେଉଛି ନୂଆ ନୂଆ ପ୍ରଯୁକ୍ତି ଯାହା ୱେବ ୩.୦ ତିଆରି କରିବାରେ ସହାୟକ ହେଉଛି । ଏନଏଫଟି : ବର୍ତ୍ତମାନ ଲୋକେ ଛବି, ସଂଗୀତ ଇତ୍ୟାଦି ଏନଏଫଟି ଇଣ୍ଟରନେଟରେ କିଣାବିକି କରି ମେଟାଭର୍ସରେ ଉପଯୋଗ କରୁଛନ୍ତି । ଓପନସି ଏକ ଲୋକପ୍ରିୟ ଏନଏଫଟି କିଣାବିକା ବଜାର । ମେଟାଭର୍ସ : ମେଟାଭର୍ସ ହେଉଛି ଏକ କାଳ୍ପନିକ ଦୁନିଆ । ଯେଉଁଠାରେ ଲୋକମାନେ ନିଜସ୍ୱ ଅବତାର ବାଛି ନିଜକୁ ସେଠାକାର ତିନି ଆୟାମ (3D) ପରିବେଶରେ ଅନୁଭବ କରୁଛନ୍ତି । ଧରନ୍ତୁ ଗୋଟିଏ ରେଫ୍ରିଜରେଟର କିଣିବାକୁ ଆପଣ ଇଚ୍ଛାକଲେ। ଘରେ ବସି ଅନଲାଇନରେ ଭିନ୍ନ ଭିନ୍ନ ପ୍ରକାରର ନମୁନା ଦେଖିଲା ପରେ ବି କଣ କିଣିବେ ନିଶ୍ଚିତ ହୋଇ ପାରିଲେନି। ମେଟାଭର୍ସରେ ଏଇ ଅନଲାଇନର ସୀମାବଦ୍ଧତା ରହିବନି। କମ୍ପ୍ୟୁଟର ସହ ସଂଯୁକ୍ତ ଗୋଟିଏ ଚଷମା ପିନ୍ଧି (୩ ଡି ସିନେମା ଦେଖିବା ସମୟରେ ବ୍ୟବହାର କଲା ଭଳି) ଆପଣ ସିଧା ଚାଲିଯିବେ ଅଭିଳଷିତ ଦୋକାନକୁ। ବିଶେଷ ଡିଜିଟାଲର ପ୍ରୟୋଗରେ ବାସ୍ତବ ଦୁନିଆ ଭଳି ଆପଣ ତାକୁ ସହଜରେ ସ୍ପର୍ଶ ଅନୁଭୂତିରେ ଆଣି ପସନ୍ଦ ମୁତାବକ ମଡେଲ ଡିଜିଟାଲ ଟଙ୍କା (କରେନ୍ସି) ଦେଇ କିଣି ପାରିବେ। - ଗିରିଜା ଶଙ୍କର ମିଶ୍ର ଡାପ୍ସ: ବ୍ଲକ୍‌ଚେନ୍‌ ଉପଯୋଗ କରି ତାହା ଉପରେ ଯେଉଁ ଆପ ତିଆରି ହୋଇଥାଏ ତାହାକୁ ବେକେନ୍ଦ୍ରିତ ଆପ ବା ଡିସେଣ୍ଟ୍ରାଲାଇଜ୍ଡ ଆପ ବା ଡାପ୍ସ କୁହାଯାଉଛି । ଆମାଜନ ୱେବ ସର୍ଭିସେସ(AWS): ବିଶ୍ବର ୯୦ ଲକ୍ଷରୁ ଅଧିକ ୱେବସାଇଟ AWS ଦ୍ୱାରା ପରିଚାଳିତ ଡାଟାବେସରୁ ତଥ୍ୟ ନିଅନ୍ତି । 🖇 ଆଧାର ଶ୍ରବଣଙ୍କଦ୍ୱାରା ଲିଖିତ ଓଡ଼ିଆ ଉଇକିପିଡ଼ିଆର ବ୍ଲକ୍‌ଚେନ୍‌ ପୃଷ୍ଠା What is in a block by Damien Cosset w3schools intro to blockchain geeksforgeeks introduction to Blockchain Blockchain adv. & disadv. by Warren Fauvel Disadvantages of Blockchain by 101 blockchains 💡 ଏହି ଲେଖା ପଛର ପ୍ରେରଣା: https://twitter.com/soumendra_ks/status/1480275204735586305?s=20 ବ୍ଲକ୍‌ଚେନ୍‌ କଥା ପଡ଼ିଲେ ଆପଣ ଯଦି କିଛି ମନେପକେଇ କହିପାରିବେ ମୋର ଶ୍ରମ ସାର୍ଥକ ହେଲା ବୋଲି ବିଶ୍ୱାସ କରିବି । ଆଗ ଲେଖାଗୁଡ଼ିକ ଜାଣିବାପାଇଁ ଏବଂ କୌଣସି ସନ୍ଦେହ ଥିଲେ ପଚାରିବା ପାଇଁ ମତେ ଟ୍ୱିଟରରେ ଅନୁସରଣ କରନ୍ତୁ: Follow @soumendrak_ LinkedIN All my important links 🙏🏼 ଜୟ ଜଗନ୍ନାଥ 🙏🏼 ଯଦି ଆପଣଙ୍କୁ ଏହି ଲେଖାଟି ଭଲ ଲାଗିଛି ନିମ୍ନୋକ୍ତ ପଂକ୍ତି ଉପଯୋଗ କରି ଲିଙ୍କ କରନ୍ତୁ: @inproceedings{Blockchain, author = {Soumendra Kumar Sahoo}, title = {Blockchain by Soumendra Kumar Sahoo}, howpublished = {\\url{https://blog.soumendrak.com/blockchain}}, year = {2022} } Let me know what you think at any of the following places: 🔗 LinkedIn: linkedin.com/in/soumendrak 📝 Medium: medium.com/@soumendrak 📖 Blog: blog.soumendrak.com 🐥 Twitter: twitter.com/soumendrak_ 🧑🏻‍💻 Github: github.com/soumendrak 📹 Youtube: youtube.com/@openodia","metadata":{"source":"https://blog.soumendrak.com/blockchain","title":"⛓ ବ୍ଲକ୍‌ଚେନ୍‌ (Blockchain)","contentLength":151}},{"pageContent":"Background As we know it today, the Internet was a cumulation of decades of research in computing technologies. To finally end up with a platform that connects billions of people and machines worldwide, we had to solve problems we didn’t even know existed. Eventually, with a mechanism that included 7 different Layers called the OSI Model, the Internet was born. Just like the internet, Blockchain, too, is a platform that had to be constructed in Layers. The layer-based model allowed developers and infrastructure architects to focus on their agendas and nothing else. source: https://en.wikipedia.org/wiki/OSI_model Put into perspective, for an application builder, it is more than enough to focus on the last Layer, the Application Layer. While for a platform developer, knowing the initial Layers is of utmost importance as they form the base for applications to be built on. As we move up, Layer to Layer, the complexity increase while the generality goes down. Introduction If you follow DeFi closely, you’ve probably come across the term “Layer 2”. Crypto natives often talk about blockchains in terms of “Layer 0”, “Layer 1” and “Layer 2”, but to understand what they mean, it’s worth explaining from the base point. Layer 0 can be considered a bridge between the Internet, the physical world, and the blockchain. Remember that blockchain technology is not all software. It involves physical network infrastructure (like the mining component of PoW platforms, data storage, etc.) that allow a complex technology like Blockchain function. Layer 0 is the basement that is never seen but is as important as the building itself. Blockchains like Bitcoin and Ethereum is often described as “Layer 1” chains because they settle every transaction on their network. Layer 2, meanwhile, is the framework that gets built on top of the blockchain. Layer 2 solutions have an important role to play in improving scaling. We’ve spent a lot of time researching them in regards to our own offering, and we’re closely linked with Layer 2 projects like Polygon (formerly known as Matic). For our latest Understanding DeFi guide, we wanted to detail how they work for the community, along with some examples of the solutions that are being developed today. What is Layer 2? Ethereum has created a financial system unlike anything the world has seen before, but it suffers from some well-documented problems. Ethereum in its current iteration processes around 15 transactions per second. This has caused a number of issues: the network often gets congested, sometimes pushing gas fees to extreme highs. Blockchains should be scalable, secure and decentralised. While there are ways of improving transaction speeds by using more powerful nodes, this approach compromises on decentralisation. It’s hoped that Ethereum 2.0 will improve scalability, but it will still be some time before the upgrade is complete. And with Etheruem usage peaking at around 1 million transactions daily, it needs other solutions today. That’s what Layer 2 is for. Layer 2 is what gets built on top of the base chain in order to improve scalability. Like Bitcoin, Ethereum can be thought of as a Layer 1 protocol. It’s the settlement layer for all transactions on the network. Layer 2 solutions offer a way of increasing transaction speeds and scaling while benefiting from the security of the main chain. In some cases, they can process thousands of transactions per second, which will be needed if Ethereum is to achieve wider adoption. Examples of Layer 2 solutions Ethereum’s Layer 2 solutions fall under several categories, and each one differs in its approach to making the network more scalable. Channels Channels offer users a way of making multiple transactions off-chain while submitting only two transactions to the settlement layer, i.e. Ethereum. This allows for high throughput at a low cost, however, there are limitations. Participants need to be known in advance, and they’re also required to deposit funds into a multisig contract. That means the network needs to be regularly monitored to ensure that the funds are safe. It also takes time to set up channels between users, so doesn’t allow for much open participation. Channels come in two forms: state channels and payment channels. Examples of channels include Connext and Raiden. Plasma Plasma solutions use Merkle tree to create an additional chain to the main blockchain. This facilitates fast transactions at a lower cost, as the blocks aren’t settled on the main chain, and there’s no need to store data on the ledger. However, there are limits to what you can do using Plasma. The framework only supports certain transactions, so more complex DeFi activity, for example, isn’t possible. Withdrawals are subject to potential challenges and longer waiting times, and it also requires someone to monitor the network to check funds are safe, as well as operators to store data. Examples of Plasma solutions include OMG and Polygon (the Polygon SDK is also set to support ZK rollups, optimistic rollups and standalone chains). Sidechains Sidechains run separately from the main blockchain and operate independently using their own consensus algorithm. They connect to Ethereum via a two-way bridge. They’re compatible with the Ethereum Virtual Machine, but they’re also limited: they’re less decentralised than the main network, the consensus algorithm isn’t settled by Layer 1, and sidechain validators could coordinate to act maliciously. Examples of sidechains include xDAI and Skale. Rollups Rollups work by executing transactions on Layer 2, while submitting data to the base chain. This means that they benefit from the security of Ethereum, but can perform transactions outside of Layer 1. There are two types of rollups: ZK (zero-knowledge) rollups, which bundle many transfers into one transaction, and optimistic rollups, which operate in parallel to Ethereum. ZK rollups group transactions together by creating what’s known as a SNARK — a succinct non-interactive argument of knowledge. This is a cryptographic proof that gets submitted to the base layer, so only one transaction is sent to Ethereum. ZK rollups allow for fast transactions, but the scope of these transactions is limited. Examples of ZK rollup solutions include Loopring and StarkWare. Optimistic rollups, meanwhile, sit alongside the base chain, with transactions sent to Ethereum as calldata. Optimistic rollups provide composability, a fundamental requirement of DeFi, though they are subject to longer wait times and potential attacks. Optimistic rollups are currently being developed by Optimism. Validium Validium is not unlike ZK rollup technology in that it uses zero-knowledge proofs, but the data is stored off-chain. That means up to 10,000 transactions per second with no withdrawal delays and a lower risk of attacks, but it’s not possible to run every kind of smart contract, generating ZK proofs requires high computational power, and finality times can be slower. Examples of Validium solutions include StarkWare and DeversiFi. Final thoughts In summary, there are currently several Layer 2 solutions that aim to resolve Ethereum’s scaling issues. There are also some hybrid solutions that seek to improve the network’s scalability by combining the technologies. If Ethereum achieves its full potential, becoming a global trust layer, it’s likely that these solutions and more will be required to scale the network in combination with Ethereum 2.0. In the future, the Ethereum ecosystem could see significant change, as new projects assess the benefits and drawbacks of running on Layer 2. Now that you understand Ethereum’s various Layer 2 solutions, are there any you’ve used before? If not, why not try a transaction using Plasma or ZK roll-ups? Let us know how you get on. There is Layer 3 as well, built on top of layer 2 for a specific narrow use case. Thank you for reading to the end. References: Understanding DeFi: Layer 2 explained Beginner’s guide to Blockchain layers","metadata":{"source":"https://blog.soumendrak.com/understanding-layer-2-of-blockchain","title":"Understanding Layer 2 of Blockchain","contentLength":1317}},{"pageContent":"This is a part of my job interviews series. 👉🏼 Background Years of Experience: 4.5 years Relevant Python experience: 2 years Year: August 2016 Campus: Position: Python developer Company: HCL Technologies Ltd. 👉🏼 Interview discussions ☝🏼First phase via GIPHY It was a pen paper-based exam, no computer was there. The discussion was more focused on solving RegEx-based problems. Regex for credit card number detection You can check this SO question for answers. Real-life use cases of decorator Provided example of login_required decorator in Django Reversal of a list not using split or any function Explained the following examplemy_list = ['a', 'b', 'c'] my_reversed_list = my_list[::-1] IP address validation using regex You can check out this SO question for answers. Code to find out how many vowels are there in a string You can check this SO answer. Example of a decorator function Written a timer decorator as mentioned here on GeekforGeeks website. You can checkout codetiming from real-python. 👉🏼 Result via GIPHY 🤔Analysis It was a walk-in and many candidates were there, more than 50. The interview process was not well structured and could have been improved. I did not expect the discussions will be so much concentrated on RegEx, though I had the basic knowledge of RegEx I was not able to come up with solutions at that time. I have appeared in 20+ interviews so far. You can check out my job interview series for the rest of the interviews experiences. Let me know if you have any further questions. Thank You 🙏🏼 Image source: Dealstreetasia","metadata":{"source":"https://blog.soumendrak.com/hcl-interview-experience","title":"HCL interview experience","contentLength":259}},{"pageContent":"Calculation SOPR is calculated simply as (Price sold / Price bought) SOPR values There are three possible values of SOPR. SOPR > 1 The coin holder made a profit. The selling price is higher than the buying price SOPR < 1 The coin holder made a loss. Based on the formula above the selling price is lower than the buying price SOPR = 1 The coin holder made no profit or loss. Here is an example of ETH SOPR: Indication by SOPR What does this SOPR indicate? In general, higher SOPR values indicate that more profit was realised that day. Successive peaks of high SOPR (creating an indicator uptrend) suggest continual distribution, usually during bullish price rallies. A lower SOPR indicates fear and panic selling in the market. References Glassnode Introducing SOPR by Renato Shirakashi","metadata":{"source":"https://blog.soumendrak.com/what-is-sopr-spent-output-profit-ratio","title":"What is SOPR (Spent Output Profit Ratio)?","contentLength":131}}]